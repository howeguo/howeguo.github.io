<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Howeguo Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-08-24T17:34:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Howeguo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[django deplop by  virtualenv + gunicorn + nginx + supervisor]]></title>
    <link href="http://yoursite.com/2016/08/25/django-deplop-by-virtualenv-gunicorn-nginx-supervisor/"/>
    <id>http://yoursite.com/2016/08/25/django-deplop-by-virtualenv-gunicorn-nginx-supervisor/</id>
    <published>2016-08-24T16:23:18.000Z</published>
    <updated>2016-08-24T17:34:31.000Z</updated>
    <content type="html"><![CDATA[<p>今天尝试了一下在一台机器上去安装不同版本的python、django<br>发现原来linux上有个类似模拟虚拟环境的东西啊virtualenv<br>就尝试自己在这个虚拟环境里搭建了一套自django1.9.2 python2.7 然后用gunicorn做web服务器、supervisor去管理进程、nginx去做外部转发和访问，这期间参考了国外和国内的一些大牛写的文章，在这里首先表示感谢<br>我确实是按照这个步骤完成了一套这样的服务</p>
<p>第一步：安装虚拟环境的库<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line"></span><br><span class="line">Downloading/unpacking virtualenv</span><br><span class="line">  Downloading virtualenv-<span class="number">15.0</span><span class="number">.3</span>-py2.py3-none-any.whl (<span class="number">3.5</span>MB): <span class="number">3.5</span>MB downloaded</span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv</span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure></p>
<p>第二步：创建虚拟环境<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virtualenv bugenv</span><br><span class="line">New python executable <span class="keyword">in</span> <span class="regexp">/Users/</span>tataufo<span class="regexp">/todaysay_env/</span>bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure></p>
<p>第三步：进入虚拟环境<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www</span><span class="comment"># cd bugenv/</span></span><br><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># source bin/activate</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span> <span class="comment">#激活环境，这个每次在重新登陆服务器的时候都需要激活</span></span><br></pre></td></tr></table></figure></p>
<p>第三步：安装django和gunicorn</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> django==<span class="number">1.9</span>.<span class="number">2</span></span><br><span class="line">sudo pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure>
<p>第四步：创建django项目和django app</p>
<p>django-admin.py startproject bugproject<br>python manages.py startapp bugapp</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># ls</span></span><br><span class="line">bin <span class="keyword">include</span> lib local</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># mkdir djcode</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># cd djcode/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># django-admin.py startproject bugproject</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># cd bugproject/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># python manage.py startapp bugapp</span></span><br></pre></td></tr></table></figure>
<p>第五步：设置django 的settings.py文件<br>添加app，最后结果如下<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">INSTALLED_APPS</span> = (</span><br><span class="line">    <span class="symbol">'django</span>.contrib.admin',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.auth',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.sessions',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.messages',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</span><br><span class="line">    # add app</span><br><span class="line">    <span class="symbol">'bugapp'</span>,</span><br><span class="line">    <span class="symbol">'gunicorn'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>第六步：运行gunicorn<br><a id="more"></a><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># pwd</span></span><br><span class="line">/home/www/bugenv/djcode/bugproject</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># gunicorn bugproject.wsgi:application -b 127.0.0.1:11000</span></span><br></pre></td></tr></table></figure></p>
<p>第七步：使用supervisor去管理gunicorn的运行<br>先创建一个脚本去启动django服务，就叫gunicorn_start<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">NAME=<span class="string">"bugproject"</span>                                  <span class="comment"># Name of the application</span></span><br><span class="line">DJANGODIR=/home/www/bugenv/djcode/bugproject             <span class="comment"># Django project directory</span></span><br><span class="line">SOCKFILE=/home/www/bugenv/djcode/run/gunicorn.sock  <span class="comment"># we will communicte using this unix socket</span></span><br><span class="line">USER=root                                        <span class="comment"># the user to run as</span></span><br><span class="line">GROUP=root                                     <span class="comment"># the group to run as</span></span><br><span class="line">NUM_WORKERS=<span class="number">4</span>                                    <span class="comment"># how many worker processes should Gunicorn spawn</span></span><br><span class="line">DJANGO_SETTINGS_MODULE=bugproject.settings             <span class="comment"># which settings file should Django use</span></span><br><span class="line">DJANGO_WSGI_MODULE=bugproject.wsgi                     <span class="comment"># WSGI module name</span></span><br><span class="line"></span><br><span class="line">PORT=<span class="number">11000</span></span><br><span class="line">SERVER_NAME=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$NAME</span> as `whoami`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate the virtual environment</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DJANGODIR</span></span><br><span class="line"><span class="built_in">source</span> ../bin/activate</span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=<span class="variable">$DJANGO_SETTINGS_MODULE</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$DJANGODIR</span>:<span class="variable">$PYTHONPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the run directory if it doesn't exist</span></span><br><span class="line">RUNDIR=$(dirname <span class="variable">$SOCKFILE</span>)</span><br><span class="line"><span class="built_in">test</span> <span class="operator">-d</span> <span class="variable">$RUNDIR</span> || mkdir -p <span class="variable">$RUNDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your Django Unicorn</span></span><br><span class="line"><span class="comment"># Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)</span></span><br><span class="line"><span class="built_in">exec</span> ../bin/gunicorn <span class="variable">$&#123;DJANGO_WSGI_MODULE&#125;</span>:application \</span><br><span class="line">  --name <span class="variable">$NAME</span> \</span><br><span class="line">  --workers <span class="variable">$NUM_WORKERS</span> \</span><br><span class="line">  --user=<span class="variable">$USER</span> --group=<span class="variable">$GROUP</span> \</span><br><span class="line">  --bind=<span class="variable">$SERVER_NAME</span>:<span class="variable">$PORT</span> \</span><br><span class="line">  --log-level=debug \</span><br><span class="line">  --log-file=-</span><br><span class="line">~</span><br></pre></td></tr></table></figure></p>
<p>以后就用这个脚本去运行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod u+x bin/gunicorn_start</span><br><span class="line">$ . gunicorn_start</span><br><span class="line"></span><br><span class="line">Starting bugproject as  hello</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Starting gunicorn <span class="number">18.0</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [DEBUG] Arbiter booted</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Listening at: unix:/home/www/bugenv/djcode/run/gunicorn.sock (<span class="number">10724</span>)</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Using worker: sync</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10735</span>] [INFO] Booting worker with pid: <span class="number">10735</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10736</span>] [INFO] Booting worker with pid: <span class="number">10736</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10737</span>] [INFO] Booting worker with pid: <span class="number">10737</span></span><br><span class="line"></span><br><span class="line">^C (CONTROL-C to kill Gunicorn)</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">48</span> [<span class="number">10736</span>] [INFO] <span class="function">Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10736</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10735] [INFO] Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10735</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10724] [INFO] Handling signal: <span class="keyword">int</span></span><br><span class="line">2016-06-09 14:21:48 [10737] [INFO] Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10737</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10724] [INFO] Shutting down: Master</span></span><br></pre></td></tr></table></figure></p>
<p>第八步：安装supervisor</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude <span class="keyword">install</span> supervisor</span><br></pre></td></tr></table></figure>
<p>Supervisor可以管理多个服务，因此你可以为不同的服务创建不同的配置文件<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.<span class="literal">d</span></span><br><span class="line">vim hello.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p>
<p>文件内容：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:hello]</span><br><span class="line">command = /home/www/bugenv/djcode/gunicorn_start                    ; Command <span class="keyword">to</span> start app</span><br><span class="line">user = hello                                                          ; User <span class="keyword">to</span> <span class="command">run</span> <span class="keyword">as</span></span><br><span class="line">stdout_logfile = /home/www/bugenv/djcode/logs/gunicorn_supervisor.<span class="command">log</span>   ; Where <span class="keyword">to</span> <span class="command">write</span> <span class="command">log</span> messages</span><br><span class="line">redirect_stderr = <span class="constant">true</span>                                                ; Save stderr <span class="keyword">in</span> <span class="keyword">the</span> same <span class="command">log</span></span><br><span class="line">environment=LANG=en_US.UTF-<span class="number">8</span>,LC_ALL=en_US.UTF-<span class="number">8</span>                       ; Set UTF-<span class="number">8</span> <span class="keyword">as</span> default encoding</span><br></pre></td></tr></table></figure>
<p>创建日志文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello<span class="annotation">@django</span>:~$ mkdir -p <span class="regexp">/home/</span>www<span class="regexp">/bugenv/</span>djcode<span class="regexp">/logs/</span></span><br><span class="line">hello<span class="annotation">@django</span>:~$ touch <span class="regexp">/home/</span>www<span class="regexp">/bugenv/</span>djcode<span class="regexp">/logs/</span>gunicorn_supervisor.log</span><br></pre></td></tr></table></figure>
<p>测试supervisorctl<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl reread</span><br><span class="line"><span class="label">hello:</span> available</span><br><span class="line">$ sudo supervisorctl update</span><br><span class="line"><span class="label">hello:</span> added process group</span><br></pre></td></tr></table></figure></p>
<p>supervisor重启、查看状态、停止操作<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl status hello                       </span><br><span class="line">hello                            RUNNING    pid <span class="number">18020</span>, uptime <span class="number">0</span>:<span class="number">00</span>:<span class="number">50</span></span><br><span class="line">$ sudo supervisorctl stop hello  </span><br><span class="line"><span class="label">hello:</span> stopped</span><br><span class="line">$ sudo supervisorctl start hello                        </span><br><span class="line"><span class="label">hello:</span> started</span><br><span class="line">$ sudo supervisorctl restart hello</span><br><span class="line"><span class="label">hello:</span> stopped</span><br><span class="line"><span class="label">hello:</span> started</span><br></pre></td></tr></table></figure></p>
<p>第九步：安装nginx</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo install nginx</span><br><span class="line"><span class="variable">$ </span>sudo service nginx start</span><br></pre></td></tr></table></figure>
<p>配置nginx</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><br><span class="line">upstream hello_app_server </span><span class="expression">&#123;</span><br><span class="line">  <span class="begin-block"># fail</span>_<span class="variable">timeout</span>=0 <span class="variable">means</span> <span class="variable">we</span> <span class="variable">always</span> <span class="variable">retry</span> <span class="variable">an</span> <span class="variable">upstream</span> <span class="variable">even</span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">it</span> <span class="variable">failed</span></span><br><span class="line">  <span class="begin-block"># to return a good HTTP response </span>(<span class="variable">in</span> <span class="variable">case</span> <span class="variable">the</span> <span class="variable">Unicorn</span> <span class="variable">master</span> <span class="variable">nukes</span> <span class="variable">a</span></span><br><span class="line">  <span class="begin-block"># single worker for timing out</span>)<span class="variable">.</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">server</span> <span class="variable">unix</span>:<span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/run</span><span class="end-block">/gunicorn.sock fail</span>_<span class="variable">timeout</span>=0;</span><br><span class="line">&#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">server </span><span class="expression">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">listen</span>   80;</span><br><span class="line">    <span class="variable">server</span>_<span class="variable">name</span> <span class="variable">example.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">client</span>_<span class="variable">max</span>_<span class="variable">body</span>_<span class="variable">size</span> 4<span class="variable">G</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">access</span>_<span class="variable">log</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/logs</span><span class="end-block">/nginx-access.log</span>;</span><br><span class="line">    <span class="variable">error</span>_<span class="variable">log</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/logs</span><span class="end-block">/nginx-error.log</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">location</span> <span class="end-block">/static</span><span class="end-block">/ </span>&#123;</span><br><span class="line">        <span class="variable">alias</span>   <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/static</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">    location /media/ </span><span class="expression">&#123;</span><br><span class="line">        <span class="variable">alias</span>   <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/media</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">    location / </span><span class="expression">&#123;</span><br><span class="line">        <span class="begin-block"># an HTTP header important enough to have its own Wikipedia entry</span>:</span><br><span class="line">        <span class="begin-block">#   http</span>:/<span class="end-block">/en.wikipedia.org</span><span class="end-block">/wiki</span><span class="end-block">/X-Forwarded-For</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">X-Forwarded-For</span> $<span class="variable">proxy</span>_<span class="variable">add</span>_<span class="variable">x</span>_<span class="variable">forwarded</span>_<span class="variable">for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># enable this <span class="keyword">if</span> and only <span class="keyword">if</span> you use HTTPS</span>, <span class="variable">this</span> <span class="variable">helps</span> <span class="variable">Rack</span></span><br><span class="line">        <span class="begin-block"># set the proper protocol for doing redirects</span>:</span><br><span class="line">        <span class="begin-block"># proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">X-Forwarded-Proto</span> <span class="variable">https</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># pass the Host</span>: <span class="variable">header</span> <span class="variable">from</span> <span class="variable">the</span> <span class="variable">client</span> <span class="variable">right</span> <span class="variable">along</span> <span class="variable">so</span> <span class="variable">redirects</span></span><br><span class="line">        <span class="begin-block"># can be set properly within the Rack application</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">Host</span> $<span class="variable">http</span>_<span class="variable">host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># we don</span>'<span class="variable">t</span> <span class="variable">want</span> <span class="variable">nginx</span> <span class="variable">trying</span> <span class="variable">to</span> <span class="variable">do</span> <span class="variable">something</span> <span class="variable">clever</span> <span class="variable">with</span></span><br><span class="line">        <span class="begin-block"># redirects</span>, <span class="variable">we</span> <span class="variable">set</span> <span class="variable">the</span> <span class="variable">Host</span>: <span class="variable">header</span> <span class="variable">above</span> <span class="variable">already.</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">redirect</span> <span class="variable">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># set </span><span class="string">"proxy_buffering off"</span> *<span class="variable">only</span>* <span class="variable">for</span> <span class="variable">Rainbows</span>! <span class="variable">when</span> <span class="variable">doing</span></span><br><span class="line">        <span class="begin-block"># Comet</span><span class="end-block">/long-poll stuff.  It</span>'<span class="variable">s</span> <span class="variable">also</span> <span class="variable">safe</span> <span class="variable">to</span> <span class="variable">set</span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">you</span>'<span class="variable">re</span></span><br><span class="line">        <span class="begin-block"># using only serving fast clients with Unicorn </span>+ <span class="variable">nginx.</span></span><br><span class="line">        <span class="begin-block"># Otherwise you </span>_<span class="variable">want</span>_ <span class="variable">nginx</span> <span class="variable">to</span> <span class="variable">buffer</span> <span class="variable">responses</span> <span class="variable">to</span> <span class="variable">slow</span></span><br><span class="line">        <span class="begin-block"># clients</span>, <span class="variable">really.</span></span><br><span class="line">        <span class="begin-block"># proxy</span>_<span class="variable">buffering</span> <span class="variable">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># Try to serve static files from nginx</span>, <span class="variable">no</span> <span class="variable">point</span> <span class="variable">in</span> <span class="variable">making</span> <span class="variable">an</span></span><br><span class="line">        <span class="begin-block"># </span>*<span class="variable">application</span>* <span class="variable">server</span> <span class="variable">like</span> <span class="variable">Unicorn</span><span class="end-block">/Rainbows</span>! <span class="variable">serve</span> <span class="variable">static</span> <span class="variable">files.</span></span><br><span class="line">        <span class="variable"><span class="keyword">if</span></span> (!<span class="variable">-f</span> $<span class="variable">request</span>_<span class="variable">filename</span>) &#123;</span><br><span class="line">            <span class="variable">proxy</span>_<span class="variable">pass</span> <span class="variable">http</span>:/<span class="end-block">/hello</span>_<span class="variable">app</span>_<span class="variable">server</span>;</span><br><span class="line">            <span class="variable">break</span>;</span><br><span class="line">        &#125;</span><span class="xml"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Error pages</span><br><span class="line">    error_page 500 502 503 504 /500.html;</span><br><span class="line">    location = /500.html </span><span class="expression">&#123;</span><br><span class="line">        <span class="variable">root</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/static</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>重启<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>nginx  -c /etc/nginx/nginx.conf <span class="comment">#设置加载配置文件</span></span><br><span class="line"><span class="variable">$ </span>sudo service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>最后附上如何卸载各个服务(这里就不翻译了)：</p>
<p>Uninstalling the Django application</p>
<p>If time comes to remove the application, follow these steps.</p>
<p>Remove the virtual server from Nginx sites-enabled folder:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>hello_django</span><br></pre></td></tr></table></figure></p>
<p>Restart Nginx:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>If you never plan to use this application again, you can remove its config file also from the sites-available directory<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>hello_django</span><br></pre></td></tr></table></figure></p>
<p>Stop the application with Supervisor:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo supervisorctl stop hello</span><br></pre></td></tr></table></figure></p>
<p>Remove the application from Supervisor’s control scripts directory:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">rm</span> /etc/supervisor/<span class="keyword">conf</span>.<span class="keyword">d</span>/hello.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p>
<p>If you never plan to use this application again, you can now remove its entire directory from webapps:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo rm -r /webapps/hello_django</span><br></pre></td></tr></table></figure>
<p>感谢该文章作者：<br><a href="http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/" target="_blank" rel="external">http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/</a></p>
<p>希望可以帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天尝试了一下在一台机器上去安装不同版本的python、django<br>发现原来linux上有个类似模拟虚拟环境的东西啊virtualenv<br>就尝试自己在这个虚拟环境里搭建了一套自django1.9.2 python2.7 然后用gunicorn做web服务器、supervisor去管理进程、nginx去做外部转发和访问，这期间参考了国外和国内的一些大牛写的文章，在这里首先表示感谢<br>我确实是按照这个步骤完成了一套这样的服务</p>
<p>第一步：安装虚拟环境的库<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line"></span><br><span class="line">Downloading/unpacking virtualenv</span><br><span class="line">  Downloading virtualenv-<span class="number">15.0</span><span class="number">.3</span>-py2.py3-none-any.whl (<span class="number">3.5</span>MB): <span class="number">3.5</span>MB downloaded</span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv</span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure></p>
<p>第二步：创建虚拟环境<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virtualenv bugenv</span><br><span class="line">New python executable <span class="keyword">in</span> <span class="regexp">/Users/</span>tataufo<span class="regexp">/todaysay_env/</span>bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure></p>
<p>第三步：进入虚拟环境<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www</span><span class="comment"># cd bugenv/</span></span><br><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># source bin/activate</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span> <span class="comment">#激活环境，这个每次在重新登陆服务器的时候都需要激活</span></span><br></pre></td></tr></table></figure></p>
<p>第三步：安装django和gunicorn</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> django==<span class="number">1.9</span>.<span class="number">2</span></span><br><span class="line">sudo pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure>
<p>第四步：创建django项目和django app</p>
<p>django-admin.py startproject bugproject<br>python manages.py startapp bugapp</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># ls</span></span><br><span class="line">bin <span class="keyword">include</span> lib local</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># mkdir djcode</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># cd djcode/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># django-admin.py startproject bugproject</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># cd bugproject/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># python manage.py startapp bugapp</span></span><br></pre></td></tr></table></figure>
<p>第五步：设置django 的settings.py文件<br>添加app，最后结果如下<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">INSTALLED_APPS</span> = (</span><br><span class="line">    <span class="symbol">'django</span>.contrib.admin',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.auth',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.sessions',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.messages',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</span><br><span class="line">    # add app</span><br><span class="line">    <span class="symbol">'bugapp'</span>,</span><br><span class="line">    <span class="symbol">'gunicorn'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>第六步：运行gunicorn<br>]]>
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="gunicorn" scheme="http://yoursite.com/tags/gunicorn/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="supervisor" scheme="http://yoursite.com/tags/supervisor/"/>
    
      <category term="virtualenv" scheme="http://yoursite.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql-django-support-emoji(utf8mb4)]]></title>
    <link href="http://yoursite.com/2016/08/24/mysql-django-support-emoji-utf8mb4/"/>
    <id>http://yoursite.com/2016/08/24/mysql-django-support-emoji-utf8mb4/</id>
    <published>2016-08-24T15:58:28.000Z</published>
    <updated>2016-08-24T16:18:26.000Z</updated>
    <content type="html"><![CDATA[<p>今天在做mysql数据存储的时候就遇见了大家可能都会遇见的问题(emoji存储)<br>这里主要是涉及到utf8mb4的设置</p>
<p>mysql 5.5以上才支持字符集<br>第一步：数据库版本检查:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="function"><span class="title">version</span><span class="params">()</span></span> #查看mysql版本</span><br></pre></td></tr></table></figure>
<p>第二步：修改mysql配置文件 my.conf(windows上my.ini), 修改/添加如下配置为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-<span class="operator"><span class="keyword">set</span>=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-<span class="built_in">character</span>-<span class="keyword">set</span>=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8mb4</span></span><br></pre></td></tr></table></figure></p>
<p>第三步：重启mysql<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$service</span> mysql restart</span><br></pre></td></tr></table></figure></p>
<p>第四步:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%';</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value              </span>|</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line">|<span class="string"> character_set_client    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_database  </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary            </span>|</span><br><span class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_server    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_system    </span>|<span class="string"> utf8              </span>|</span><br><span class="line">|<span class="string"> collation_connection    </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">|<span class="string"> collation_database      </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">|<span class="string"> collation_server        </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line"> rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p> 最后，因为我是跟django一起配合用的，所以 django的settings.py文件里也要做相应的配置<br> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;<span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在做mysql数据存储的时候就遇见了大家可能都会遇见的问题(emoji存储)<br>这里主要是涉及到utf8mb4的设置</p>
<p>mysql 5.5以上才支持字符集<br>第一步：数据库版本检查:</p>
<figure class="highlight styl]]>
    </summary>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="emoji" scheme="http://yoursite.com/tags/emoji/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first-product]]></title>
    <link href="http://yoursite.com/2016/04/23/first-product/"/>
    <id>http://yoursite.com/2016/04/23/first-product/</id>
    <published>2016-04-23T06:46:05.000Z</published>
    <updated>2016-08-24T15:55:54.000Z</updated>
    <content type="html"><![CDATA[<p>来谈一谈近期从iOS转做PM的感受吧，<br>之前觉得PM的工作其实是很简单，整天就会随便想一想，就要来让我们来做这做那的，而且感觉他们整天很清闲，<br>真正当我去做这项工作的时候，才发现其实不是这样的，他们每天除了要解决各个部门的需求之外，每天脑子里还要想各种天花乱坠的需求和玩法，<br>而且最大的感受其实是，一天到晚都在开会，去解决各个部门的问题。<br>即使我以后不做PM了，我也会对PM好的，因为他们真的不容易，最后一句请善待你们公司的PM，啊哈哈哈！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>来谈一谈近期从iOS转做PM的感受吧，<br>之前觉得PM的工作其实是很简单，整天就会随便想一想，就要来让我们来做这做那的，而且感觉他们整天很清闲，<br>真正当我去做这项工作的时候，才发现其实不是这样的，他们每天除了要解决各个部门的需求之外，每天脑子里还要想各种天花乱坠的]]>
    </summary>
    
      <category term="Product" scheme="http://yoursite.com/tags/Product/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactiveCocoa-UI-UITextField]]></title>
    <link href="http://yoursite.com/2016/01/21/ReactiveCocoa-UI-UITextField/"/>
    <id>http://yoursite.com/2016/01/21/ReactiveCocoa-UI-UITextField/</id>
    <published>2016-01-21T07:17:56.000Z</published>
    <updated>2016-01-21T07:23:03.000Z</updated>
    <content type="html"><![CDATA[<p>今天遇见了UITextField的使用<br>1.监听输入的状态<br>    [[self.textField rac_signalForControlEvents:UIControlEventEditingDidBegin] subscribeNext:^(UITextField *sender) {<br>              @strongify(self);<br>              NSLog(@”tag is %@”,@(sender.tag));<br>        }];</p>
<ol>
<li>监控输入的内容<br> [self.textField.rac_textSignal subscribeNext:^(id x) {<pre><code><span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"content is %@"</span>,x);</span>
</code></pre> }];</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天遇见了UITextField的使用<br>1.监听输入的状态<br>    [[self.textField rac_signalForControlEvents:UIControlEventEditingDidBegin] subscribeNext:^(UIText]]>
    </summary>
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
      <category term="UIKit" scheme="http://yoursite.com/tags/UIKit/"/>
    
      <category term="UITextField" scheme="http://yoursite.com/tags/UITextField/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactiveCocoa-Observer]]></title>
    <link href="http://yoursite.com/2016/01/21/ReactiveCocoa-Observer/"/>
    <id>http://yoursite.com/2016/01/21/ReactiveCocoa-Observer/</id>
    <published>2016-01-21T07:02:46.000Z</published>
    <updated>2016-08-24T17:18:24.000Z</updated>
    <content type="html"><![CDATA[<p>1.监听属性的变化</p>
<p>TUHomeViewModel *model = [[TUHomeViewModel alloc] init];<br>[RACObserve(model, dataArray) subscribeNext:^(id x) {<br>    NSLog(@”haha is %@”,x);<br>}];<br>希望可以帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.监听属性的变化</p>
<p>TUHomeViewModel *model = [[TUHomeViewModel alloc] init];<br>[RACObserve(model, dataArray) subscribeNext:^(id x) {<br>   ]]>
    </summary>
    
      <category term="Observer" scheme="http://yoursite.com/tags/Observer/"/>
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactiveCocoa-UI-Button]]></title>
    <link href="http://yoursite.com/2016/01/19/ReactiveCocoa-UI-Button/"/>
    <id>http://yoursite.com/2016/01/19/ReactiveCocoa-UI-Button/</id>
    <published>2016-01-19T12:16:53.000Z</published>
    <updated>2016-01-21T07:18:40.000Z</updated>
    <content type="html"><![CDATA[<p>新项目中使用了ReactiveCocoa框架，然后在使用过程中遇见的问题记录一下<br>今天遇见了UIButton的使用<br>传统的UIButton Target Action 方式</p>
<p>之前我们使用UIButton的点击方法一般有两种。一种是直接从xib里面拖一个IBAction出来在里面写代码。</p>
<p>另外一种是代码创建的 比如这样</p>
<p>  UIButton *myButton = [[UIButton alloc] init…];<br>  [myButton addTarget:something action:@selector(myAction) forControlEvents:UIControlEventTouchUpInside];<br>然后在下面写一个myAction的方法来进行操作。</p>
<p>这样对我来说存在两个问题：</p>
<p>button对应的方法分开了。在阅读代码的时候，当我想知道这个button对应的方法或者反过来action方法对应的button。通常需要跳转一次以上才能知道。(也许是我的阅读代码习惯比较原始)<br>我在action方法里面如果需要引用一个变量的时候，无法使用局部变量。通常就需要把这个资源设计为一个property。尽管这个资源或者变量只是在action里面调用一次。(这个也许是我写代码的问题)<br>这两个可能在我遇见ReactiveCocoa都不能叫问题。但是在ReactiveCocoa里面我发现了更加优美的解决方法。好开心。</p>
<p>ReactiveCocoa方式的UIButton</p>
<p>由于ReactiveCocoa高深的知识点，我也弄不太清楚。下面我只是说明怎么用的hello world级别。更多内容请阅读github上的项目主页。</p>
<p>如果使用xib。只需拖一个IBOutlet的property出来。比如这样</p>
<p>  @property (weak, nonatomic) IBOutlet UIButton <em>xibButton;<br>  NSString </em>helloWorld = @”hello world!!!”;<br>  self.xibButton.rac_command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {<br>  NSLog(@”%@”, helloWorld);<br>  return [RACSignal empty];<br>  }];<br>如果是代码创建一切照旧</p>
<p>NSString <em>helloWorld = @”hello world!!!”;<br>UIButton </em>myButton = [UIButton buttonWithType:UIButtonTypeSystem];<br>myButton.frame = CGRectMake(0, 0, 100, 50);<br>[myButton setTitle:@”Say” forState:UIControlStateNormal];<br>[self.view addSubview:myButton];<br>myButton.rac_command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {<br>  NSLog(@”%@”, helloWorld);<br>  return [RACSignal empty];<br>}];<br>这些代码我一般写在viewDidLoad方法里面。当然你可以在正确的地方使用他们。<br>运行试试。哇。魔法一般。完全解决我在传统的UIButton遇到的两个问题。</p>
<p>Best Wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>新项目中使用了ReactiveCocoa框架，然后在使用过程中遇见的问题记录一下<br>今天遇见了UIButton的使用<br>传统的UIButton Target Action 方式</p>
<p>之前我们使用UIButton的点击方法一般有两种。一种是直接从xib里面拖]]>
    </summary>
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
      <category term="UIButton" scheme="http://yoursite.com/tags/UIButton/"/>
    
      <category term="UIKit" scheme="http://yoursite.com/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-iBeacon-test]]></title>
    <link href="http://yoursite.com/2016/01/14/ios-iBeacon-test/"/>
    <id>http://yoursite.com/2016/01/14/ios-iBeacon-test/</id>
    <published>2016-01-14T08:19:32.000Z</published>
    <updated>2016-01-15T10:16:34.000Z</updated>
    <content type="html"><![CDATA[<p>iBeacon是苹果公司在iOS7推出的新技术，但是发现国内这方面的app一直很少，今天抽时间也研究一下<br>传统的GPS最多可以定位10米左右的范围，但是iBeacon的范围是可以<br>iBeacon是苹果被允许能在后台运行的，不论你将应用退出到后台还是杀死，iBeacon都能激活应用不过只能激活10秒左右，但是这段时间足可以做很多事情了。</p>
<p>iBeacon 硬件<br>当 Apple 在 iOS 7 中介绍 iBeacon 时，他们也宣布任何一个兼容的 iOS 设备都能作为一个 iBeacon 。然而，他们也表示硬件制造商同样也能制造单独的、低功耗的 iBeacon 。在本文发表前，距离 iOS 7 的推出已过去大约 6 个月，现在已有许多家公司宣布和推出了独立的硬件 iBeacon 发射器。</p>
<p>iBeacon 使用 Bluetooth LE 技术，所以你必须要有一个内置有低功耗蓝牙的 iOS 设备以便与 iBeacon 协同工作。目前这个列表里包含如下一些设备：</p>
<ol>
<li>iPhone 4s 或更新的</li>
<li>第三代 iPad 或更新的</li>
<li>iPad mini 或更新的</li>
<li>第五代iPod touch 或更新的</li>
</ol>
<p>注意的是：在iOS8中苹果改变了地位的开启方式（iBeacon的使用是基于蓝牙和定位的），首先要在工程里的info.plist增加字段NSLocationAlwaysUsageDescription（这个是允许一直在后台运行的）</p>
<p>还是看下面的吧<br>推荐一些关于iBeacon的详细的说明和使用<br><a href="http://www.jianshu.com/p/7816b016ceac" target="_blank" rel="external">http://www.jianshu.com/p/7816b016ceac</a><br><a href="http://www.cctime.com/html/2014-11-4/201411411115005.htm" target="_blank" rel="external">http://www.cctime.com/html/2014-11-4/201411411115005.htm</a><br><a href="http://www.cocoachina.com/industry/20140512/8377.html" target="_blank" rel="external">http://www.cocoachina.com/industry/20140512/8377.html</a><br><a href="http://www.5icool.org/a/201402/a4653.html" target="_blank" rel="external">http://www.5icool.org/a/201402/a4653.html</a></p>
<p>Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iBeacon是苹果公司在iOS7推出的新技术，但是发现国内这方面的app一直很少，今天抽时间也研究一下<br>传统的GPS最多可以定位10米左右的范围，但是iBeacon的范围是可以<br>iBeacon是苹果被允许能在后台运行的，不论你将应用退出到后台还是杀死，iBea]]>
    </summary>
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[create-new-ios-app-process]]></title>
    <link href="http://yoursite.com/2016/01/14/create-new-ios-app-process/"/>
    <id>http://yoursite.com/2016/01/14/create-new-ios-app-process/</id>
    <published>2016-01-14T03:36:22.000Z</published>
    <updated>2016-01-14T04:29:15.000Z</updated>
    <content type="html"><![CDATA[<p>最近公司要做新项目，涉及到搭建app的环境和一些简单的配置，就简单记录一下<br>App发布的工作一切准备好了之后，就可以发布应用到App Store了，应用发布概括起来需要以下几个流程：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注册<span class="keyword">App</span> ID，在Xcode中指定Bundle Identifier</span><br><span class="line">创建发布证书（Distribution Certificate）</span><br><span class="line">创建 Distribution Provisioning Profile</span><br><span class="line">用Distribution Profile为应用签名</span><br><span class="line">打包<span class="keyword">App</span></span><br><span class="line">在iTunes Connect上传<span class="keyword">App</span></span><br></pre></td></tr></table></figure></p>
<p>以上大部分的操作是在Provisioning Portal、XCode、Keychain Access工具和iTunes Connect中完成的。<br>上传App必须在Xcode软件里执行（也就是要有MacAir, MacMini等运行Moc OS X Mountain等10.x的系统，最好是10.7等最新版的。<br>XCode这个Object C的集成开发环境目前版本是4.3.2。<br>其他操作都可以在普通浏览器里完成。</p>
<p>发布iOS应用程序到App Store - 创建App ID<br>首先给iOS应用程序申请一个App ID，它是你的应用程序的唯一标识。登录iOS Developer网站，点击右侧的iOS Provisioning Portal链接，选择App ID。<br>选择创建新app ID。在Description中输入应用的描述信息。Bundle Identifier是指应用的代码标识，你可以用公司名.应用名来标识，例如：com.company.demoapp。<br>然后打开X-Code，选择Target &gt; Summary。在Identifier输入框中输入上面注册的Bundle Identifier。<br>发布iOS应用程序到App Store - 创建Distribution Certificate<br>iOS应用都有一个安全证书用于验证开发者身份和签名。在Provisioning Portal的Distribution栏目下有详细介绍，但总体可以归纳为以下步骤。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打开Keychain Access，在Preferences中关闭OCSP和CRL。</span><br><span class="line">点击Keychain Access菜单，选择Certificate Assistant &gt; Request Certificate from Authority。</span><br><span class="line"></span><br><span class="line">输入Email地址，选择Saved <span class="keyword">to</span> Disk</span><br><span class="line">然后会在桌面上生成一个<span class="built_in">.</span>CSR的文件。</span><br><span class="line">然后进入Provisioning <span class="keyword">Portal</span>，选择Certificates <span class="subst">-&gt; </span>Distribution <span class="subst">-&gt; </span>Add Certificate，添加刚才创建的<span class="built_in">.</span>CSR签名文件。</span><br><span class="line">在等待审核的时候下载并安装WWDR intermediate certificate。</span><br><span class="line">刷新页面，然后就可以下载证书了。下载后安装。</span><br><span class="line">最后一步，打开Keychain Access。选中刚才安装的<span class="keyword">private</span> key，选择菜单中的Export Item将私钥导出。将导出的私钥备份到一个安全的地方，以便以后重装了系统可以还原。</span><br></pre></td></tr></table></figure></p>
<p>发布iOS应用程序到App Store - 创建Distribution Provisioning Profile<br>打开Provisioning Portal，选择Provisioning -&gt; Distribution，选择添加一个新的profile。Distribution Method要选择App Store，App ID需要输入在前面申请的App ID。提交后需要等一会儿再刷新这个页面。然后就可以下载和安装profile了。安装后profile会被添加到XCode。<br>发布iOS应用程序到App Store - 检查签名和生成设置<br>打开XCode，在Build Settings中选择Code Signing。在Release设置上选择刚才申请的Distribution Profile。<br>选择生成目标为iOS device，然后点击Archiving开始打包应用。</p>
<p>感谢原作者：<a href="http://blog.sina.com.cn/s/blog_3e28c8a50101fxtp.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_3e28c8a50101fxtp.html</a><br>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近公司要做新项目，涉及到搭建app的环境和一些简单的配置，就简单记录一下<br>App发布的工作一切准备好了之后，就可以发布应用到App Store了，应用发布概括起来需要以下几个流程：<br><figure class="highlight stata"><table>]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[how-to-install-cocoapods]]></title>
    <link href="http://yoursite.com/2015/11/25/how-to-install-cocoapods/"/>
    <id>http://yoursite.com/2015/11/25/how-to-install-cocoapods/</id>
    <published>2015-11-24T16:22:58.000Z</published>
    <updated>2015-11-24T16:34:15.000Z</updated>
    <content type="html"><![CDATA[<p><strong>CocoaPods安装和使用</strong><br>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。<br>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令</p>
<p>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="operator"><span class="keyword">install</span> cocoapods</span><br><span class="line">sudo gem <span class="keyword">install</span> -<span class="keyword">n</span> /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> cocoapods</span></span><br></pre></td></tr></table></figure>
<p>由于某些原因，执行时会出现下面的错误提示：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  Could <span class="operator">not</span> find <span class="operator">a</span> valid gem <span class="string">'cocoapods'</span> (&gt;= <span class="number">0</span>), here is why:</span><br><span class="line">          Unable <span class="built_in">to</span> download data <span class="built_in">from</span> <span class="keyword">https</span>://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (<span class="keyword">https</span>://rubygems.org/latest_specs<span class="number">.4</span><span class="number">.8</span>.gz)</span><br></pre></td></tr></table></figure>
<p>当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，</p>
<p>#注意taobao的镜像地址已经都换成https了,好多博客如果没更新的话还是http<br>执行以下命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gem sources -l</span><br><span class="line"><span class="variable">$ </span>gem sources --remove <span class="symbol">https:</span>/<span class="regexp">/rubygems.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -a <span class="symbol">https:</span>/<span class="regexp">/ruby.taobao.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -l</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，接着执行命令：<br><a id="more"></a></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> setup</span><br></pre></td></tr></table></figure>
<p>如果Ruby环境不够新，可能需要更新以下：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="keyword">update</span> --<span class="built_in">system</span></span><br></pre></td></tr></table></figure></p>
<p>至此安装就完成了，我们可以尝试搜索一个第三方类库：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> search AFNetworking</span><br></pre></td></tr></table></figure>
<p>使用CocoaPods的第一步，是在当前项目下，新建一个Podfile文件：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">touch</span> Podfile</span><br></pre></td></tr></table></figure></p>
<p>然后利用vim打开Podfile文件编辑，加入你想要使用的类库，格式如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">platform </span>:ios</span><br><span class="line">pod <span class="string">'Reachability'</span>, <span class="string">'3.1.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">platform</span>:ios, <span class="string">'6.0'</span></span><br><span class="line">pod <span class="string">'JSONKit'</span>,<span class="string">'1.4'</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.3.1'</span></span><br></pre></td></tr></table></figure></p>
<p>如果是拷贝的别人的项目，或是一个很久没打开过的项目，可能需要先执行一下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> update</span><br></pre></td></tr></table></figure>
<p>最后一步，执行命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>当终端出现类似下面的提示后，就代表成功了：</p>
<p>[!] From now on use <code>Sample0814.xcworkspace</code>.<br>这个时候会看到项目文件夹下多了一个文件xxx.xcworkspace，以后要通过这个文件打开项目，老项目文件xxx.xcodeproj不再使用。<br>P.s.1 上面的每一步都有可能出现问题，但大部分问题都是因为大局域网的原因，用一个网速稳定的境外VPN可破。</p>
<p>P.s.2 如果上面因为权限问题安装失败，必须每次都要删除</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="regexp">/Users/</span>loginnanme<span class="regexp">/Library/</span>Caches<span class="regexp">/CocoaPods/</span></span><br></pre></td></tr></table></figure>
<p>因为这个缓存中会存下你的github的东西，造成每次都调用上次权限问题的缓存。</p>
<p>P.s.3 关于Podfile文件编辑时，第三方库版本号的各种写法：</p>
<p>复制代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pod ‘AFNetworking’      <span class="comment">//不显式指定依赖库版本，表示每次都获取最新版本</span></span><br><span class="line">pod ‘AFNetworking’,  ‘<span class="number">2.0</span>’     <span class="comment">//只使用2.0版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&gt;<span class="number">2.0</span>′     <span class="comment">//使用高于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&gt;=<span class="number">2.0</span>′     <span class="comment">//使用大于或等于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&lt;<span class="number">2.0</span>′     <span class="comment">//使用小于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&lt;=<span class="number">2.0</span>′     <span class="comment">//使用小于或等于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0.1</span><span class="number">.2</span>′     <span class="comment">//使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0.1</span>′     <span class="comment">//使用大于等于0.1但小于1.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0</span>′     <span class="comment">//高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>CocoaPods安装和使用</strong><br>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。<br>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令</p>
<p>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="operator"><span class="keyword">install</span> cocoapods</span><br><span class="line">sudo gem <span class="keyword">install</span> -<span class="keyword">n</span> /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> cocoapods</span></span><br></pre></td></tr></table></figure>
<p>由于某些原因，执行时会出现下面的错误提示：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  Could <span class="operator">not</span> find <span class="operator">a</span> valid gem <span class="string">'cocoapods'</span> (&gt;= <span class="number">0</span>), here is why:</span><br><span class="line">          Unable <span class="built_in">to</span> download data <span class="built_in">from</span> <span class="keyword">https</span>://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (<span class="keyword">https</span>://rubygems.org/latest_specs<span class="number">.4</span><span class="number">.8</span>.gz)</span><br></pre></td></tr></table></figure>
<p>当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，</p>
<p>#注意taobao的镜像地址已经都换成https了,好多博客如果没更新的话还是http<br>执行以下命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gem sources -l</span><br><span class="line"><span class="variable">$ </span>gem sources --remove <span class="symbol">https:</span>/<span class="regexp">/rubygems.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -a <span class="symbol">https:</span>/<span class="regexp">/ruby.taobao.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -l</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，接着执行命令：<br>]]>
    
    </summary>
    
      <category term="cocoapods" scheme="http://yoursite.com/tags/cocoapods/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits]]></title>
    <link href="http://yoursite.com/2015/11/22/git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits/"/>
    <id>http://yoursite.com/2015/11/22/git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits/</id>
    <published>2015-11-22T15:49:53.000Z</published>
    <updated>2015-11-24T16:34:39.000Z</updated>
    <content type="html"><![CDATA[<p><strong>git reflog </strong> 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录<br><strong>git log </strong> 则不能察看已经删除了的commit记录</p>
<p>具体一个例子，假设有三个commit:<br>commit3: add test3.c<br>commit2: add test2.c<br>commit1: add test1.c</p>
<p>如果执行 <strong>git reset –hard HEAD~1 </strong>则删除了commit3，如果发现删除错误了，需要恢复commit3，<br>或者是<strong>rebase</strong>的时候被rebase掉了，<br>这个时候就要使用 <strong>git reflog</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD@&#123;<span class="number">0</span>&#125;: HEAD~<span class="number">1</span>: updating HEAD</span><br><span class="line"><span class="number">63</span>ee781 HEAD@&#123;<span class="number">1</span>&#125;: commit: test3:q</span><br></pre></td></tr></table></figure></p>
<p>test3就是commit信息，然后拿到63ee781<br>可以运行<strong>git reset –hard 63ee781</strong>，则恢复了cmmit3，<br>运行 <strong>git log </strong>后可以看到：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">commit3:</span> <span class="keyword">add</span> test3.c</span><br><span class="line"><span class="label">commit2:</span> <span class="keyword">add</span> test2.c</span><br><span class="line"><span class="label">commit1:</span> <span class="keyword">add</span> test1.c</span><br></pre></td></tr></table></figure></p>
<p>这里也可以使用另外一种方法来实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="number">63</span>ee78</span><br></pre></td></tr></table></figure>
<p>感谢原作者 <a href="http://blog.csdn.net/ibingow/article/details/7541402" target="_blank" rel="external">http://blog.csdn.net/ibingow/article/details/7541402</a><br>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>git reflog </strong> 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录<br><strong>git log </strong> 则不能察看已经删除了的commit记录</p>
]]>
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="reflog" scheme="http://yoursite.com/tags/reflog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git-tag-option]]></title>
    <link href="http://yoursite.com/2015/11/20/git-tag-option/"/>
    <id>http://yoursite.com/2015/11/20/git-tag-option/</id>
    <published>2015-11-19T16:06:59.000Z</published>
    <updated>2015-11-24T16:34:28.000Z</updated>
    <content type="html"><![CDATA[<p><strong>查看标签</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git tag <span class="comment"># 在控制台打印出当前仓库的所有标签</span></span><br><span class="line"><span class="variable">$ </span>git tag -l ‘v<span class="number">0</span>.<span class="number">1</span>.*’ <span class="comment"># 搜索符合模式的标签</span></span><br></pre></td></tr></table></figure></p>
<p><strong>切换标签</strong><br>与切换分支命令相同，用git checkout [tagname]<br>切回去用 git checkout . 或者是 git checkout [当前开发的branch]<br>查看标签信息<br>用git show命令可以查看标签的版本信息：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0<span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure></p>
<p><strong>创建标签</strong><br>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。<br>创建轻量标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0<span class="number">.1</span><span class="number">.2</span>-light</span><br></pre></td></tr></table></figure></p>
<p>创建附注标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0<span class="number">.1</span><span class="number">.2</span> -m <span class="string">"0.1.2版本"</span></span><br></pre></td></tr></table></figure></p>
<p>创建轻量标签不需要传递参数，直接指定标签名称即可。<br>创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>
<p><strong>删除标签</strong></p>
<p>误打或需要修改标签时，需要先将标签删除，再打新标签。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0<span class="number">.1</span><span class="number">.2</span> <span class="preprocessor"># 删除标签</span></span><br></pre></td></tr></table></figure></p>
<p>参数d即delete的缩写，意为删除其后指定的标签。</p>
<p>给指定的commit打标签<br>打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。<br>补打标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0<span class="number">.1</span><span class="number">.1</span> <span class="number">9f</span>bc3d0</span><br></pre></td></tr></table></figure></p>
<p><strong>提交标签</strong><br>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v0<span class="number">.1</span><span class="number">.2</span> <span class="preprocessor"># 将v0<span class="number">.1</span><span class="number">.2</span>标签提交到git服务器</span></span><br><span class="line">$ git push origin –tags <span class="preprocessor"># 将本地所有标签一次性提交到git服务器</span></span><br></pre></td></tr></table></figure></p>
<p>注意：如果想看之前某个标签状态下的文件，可以这样操作<br>1.git tag   查看当前分支下的标签<br>2.git  checkout v0.21   此时会指向打v0.21标签时的代码状态，（但现在处于一个空的分支上）</p>
<p>感谢原作者：<a href="http://blog.csdn.net/wangjia55/article/details/8793577" target="_blank" rel="external">http://blog.csdn.net/wangjia55/article/details/8793577</a><br>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>查看标签</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="]]>
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="tag" scheme="http://yoursite.com/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[how-to-compress-file-inclue(music-image-videos)]]></title>
    <link href="http://yoursite.com/2015/11/15/how-to-compress-file-inclue-music-image-videos/"/>
    <id>http://yoursite.com/2015/11/15/how-to-compress-file-inclue-music-image-videos/</id>
    <published>2015-11-14T16:56:33.000Z</published>
    <updated>2015-11-14T16:59:22.000Z</updated>
    <content type="html"><![CDATA[<p>最近看了美剧硅谷，突然想自己也实现一个文件压缩，也正好项目里遇到了一些图片的压缩、日志文件太占用空间急需压缩的问题。<br>但是我还没想好怎么写，先mark一下，会不定期更新</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近看了美剧硅谷，突然想自己也实现一个文件压缩，也正好项目里遇到了一些图片的压缩、日志文件太占用空间急需压缩的问题。<br>但是我还没想好怎么写，先mark一下，会不定期更新</p>
]]>
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql-came-issues]]></title>
    <link href="http://yoursite.com/2015/11/15/mysql-came-issues/"/>
    <id>http://yoursite.com/2015/11/15/mysql-came-issues/</id>
    <published>2015-11-14T16:09:09.000Z</published>
    <updated>2015-11-14T16:59:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天突然碰见mysql服务挂掉的问题，就记录一下</p>
<p><strong> 先是重启  </strong><br>    mysql service restart<br>    /etc/init.d/mysql: ERROR: The partition with /var/lib/mysql is too full!</p>
<p><strong>这时候发现是硬盘存储空间不够了</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">df</span> -lh</span><br></pre></td></tr></table></figure></p>
<p><strong>发现/dev/xvda1 下可使用的几乎没有了</strong></p>
<p><strong>但是并不知道如何把大文件找到，如下 </strong><br>    <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size +<span class="number">100</span>M （大于<span class="number">100</span>M的文件）</span><br><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size <span class="number">100</span>M （等于<span class="number">100</span>M的文件）</span><br><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size -<span class="number">100</span>M （小<span class="number">100</span>M的文件）</span><br></pre></td></tr></table></figure></p>
<p><strong>也可以把所有比较大的目录都会列出来</strong><br>  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh <span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<p><strong>然后开删</strong><br>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rm</span> -rf</span><br></pre></td></tr></table></figure></p>
<p><strong>但是发现即使把这些删除了，硬盘的内存好像没有变化，最后google后用到了这个(PS:执行完后果然立马内存释放了)</strong><br>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> clean</span><br></pre></td></tr></table></figure></p>
<p><strong>然后就是接着启动</strong><br>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mysql</span> service restart</span><br></pre></td></tr></table></figure></p>
<p><strong>但是奇怪的是一直在starting 但是并没有日志,后来用</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--console</span></span><br><span class="line"></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">49</span>:<span class="number">56</span> [ERROR] Found <span class="number">8</span> prepared transactions! It means that mysqld was <span class="operator">not</span> shut down properly <span class="keyword">last</span> <span class="built_in">time</span> <span class="operator">and</span> critical recovery information (<span class="keyword">last</span> binlog <span class="operator">or</span> tc.<span class="built_in">log</span> <span class="built_in">file</span>) was manually deleted <span class="keyword">after</span> <span class="operator">a</span> crash. You have <span class="built_in">to</span> <span class="built_in">start</span> mysqld <span class="operator">with</span> <span class="comment">--tc-heuristic-recover switch to commit or rollback pending transactions.</span></span><br></pre></td></tr></table></figure>
<p><strong>最后google后找到一个办法</strong><br>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --<span class="keyword">tc</span>-heuristic-<span class="keyword">recover</span>=ROLLBACK</span><br></pre></td></tr></table></figure></p>
<p><strong>最后看了一下控制台，也可以用service mysql status </strong></p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--console</span></span><br><span class="line">151114 23:55:58 InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">151114 23:55:58 InnoDB: Mutexes and rw_locks <span class="operator"><span class="keyword">use</span> GCC atomic builtins</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Compressed <span class="keyword">tables</span> <span class="keyword">use</span> zlib <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: <span class="keyword">Using</span> Linux <span class="keyword">native</span> AIO</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Initializing buffer pool, <span class="keyword">size</span> = <span class="number">256.0</span><span class="keyword">M</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Completed initialization <span class="keyword">of</span> buffer pool</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: highest supported <span class="keyword">file</span> <span class="keyword">format</span> <span class="keyword">is</span> Barracuda.</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">59</span>  <span class="keyword">InnoDB</span>: Waiting <span class="keyword">for</span> the background threads <span class="keyword">to</span> <span class="keyword">start</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">00</span> Percona XtraDB (<span class="keyword">http</span>://www.percona.com) <span class="number">5.5</span><span class="number">.41</span>-MariaDB-<span class="number">37.0</span> started;</span> log sequence number 2610000435</span><br><span class="line">151114 23:56:00 [Note] Plugin 'FEEDBACK' is disabled.</span><br><span class="line">151114 23:56:00 [Note] Server socket created on IP: '<span class="operator">0.<span class="number">0.0</span><span class="number">.0</span><span class="string">'.</span><br><span class="line">151114 23:56:00 [Note] Event Scheduler: Loaded 1 event</span><br><span class="line">151114 23:56:00 [Note] mysqld: ready for connections.</span><br><span class="line">Version: '</span><span class="number">5.5</span><span class="number">.42</span>-MariaDB-<span class="number">1</span>~precise-<span class="keyword">log</span><span class="string">'  socket: '</span>/<span class="keyword">var</span>/run/mysqld/mysqld.sock<span class="string">'  port: 3306  mariadb.org binary distribution</span></span></span><br></pre></td></tr></table></figure>
<p>希望可以帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天突然碰见mysql服务挂掉的问题，就记录一下</p>
<p><strong> 先是重启  </strong><br>    mysql service restart<br>    /etc/init.d/mysql: ERROR: The partition with]]>
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-latest-error-when-upload-new-version]]></title>
    <link href="http://yoursite.com/2015/10/30/ios-latest-error-when-upload-new-version/"/>
    <id>http://yoursite.com/2015/10/30/ios-latest-error-when-upload-new-version/</id>
    <published>2015-10-29T18:44:12.000Z</published>
    <updated>2015-10-29T18:53:54.000Z</updated>
    <content type="html"><![CDATA[<p>fuck，感觉每次提交app到appStore都会遇见新的问题，今天果然也不例外！<br>错误代码为ERROR ITMS－90049<br><img src="http://img.blog.csdn.net/20151022191627756" alt="Aaron Swartz"></p>
<p>解决问题方式：</p>
<ol>
<li>在xcode左下角搜索info.plist 找到第三方的info.plist文件，如友盟中腾讯Api文件夹下的info.plist文件；</li>
<li>找到Bundle version字段 ，添加项目的build号</li>
<li><strong>添加</strong>Bundle identifier 字段，并对应添加项目的BundleId号；</li>
<li>找到Bundle versions string, short字段 添加项目的版本号</li>
<li>然后进行提交。</li>
</ol>
<p>感谢原作者 附上原文地址：<br><a href="http://blog.csdn.net/u013950854/article/details/49337605" target="_blank" rel="external">http://blog.csdn.net/u013950854/article/details/49337605</a></p>
<p>Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>fuck，感觉每次提交app到appStore都会遇见新的问题，今天果然也不例外！<br>错误代码为ERROR ITMS－90049<br><img src="http://img.blog.csdn.net/20151022191627756" alt="Aaron Sw]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-dynamic-blur-for-custom-navigation]]></title>
    <link href="http://yoursite.com/2015/10/24/ios-dynamic-blur-for-custom-navigation/"/>
    <id>http://yoursite.com/2015/10/24/ios-dynamic-blur-for-custom-navigation/</id>
    <published>2015-10-24T08:15:32.000Z</published>
    <updated>2015-10-24T09:38:00.000Z</updated>
    <content type="html"><![CDATA[<p>好久没写博客了，今天抽个空写了一个在项目中用到的一个功能。<br>主要需求是列表头部有一个cover图，然后在cover的上方的<strong>导航栏实现实时模糊</strong>，我写了一个<a href="https://github.com/howeguo/CustomDynamicBlurNavigation" target="_blank" rel="external">demo放在了github上</a>。</p>
<p><img src="https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/1.gif" alt="Aaron Swartz"><br><a id="more"></a><br><img src="https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/2.gif" alt="Aaron Swartz"></p>
<p>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好久没写博客了，今天抽个空写了一个在项目中用到的一个功能。<br>主要需求是列表头部有一个cover图，然后在cover的上方的<strong>导航栏实现实时模糊</strong>，我写了一个<a href="https://github.com/howeguo/CustomDynamicBlurNavigation">demo放在了github上</a>。</p>
<p><img src="https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/1.gif" alt="Aaron Swartz"><br>]]>
    
    </summary>
    
      <category term="blur" scheme="http://yoursite.com/tags/blur/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="小技巧" scheme="http://yoursite.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-webview-call-nativeCode-or-native-call-jsCode]]></title>
    <link href="http://yoursite.com/2015/09/03/ios-webview-call-nativeCode-or-native-call-jsCode/"/>
    <id>http://yoursite.com/2015/09/03/ios-webview-call-nativeCode-or-native-call-jsCode/</id>
    <published>2015-09-02T17:12:18.000Z</published>
    <updated>2015-09-02T17:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>UIWebView中 通过js去调用客户端的代码，客户端回调js代码。<br>最近因为项目中有一些页面使用H5实现(不得不说给客户端减少了不小压力啊😂😂)，但是有webview与客户端的交互，在使用过程当中遇到的问题做了一些总结。</p>
<p><strong>我们模拟两个场景</strong><br>在webview中点击某一个用户的头像通过客户端NativeCode实现进入该用户的资料页<br> 网页代码<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span> = "<span class="attribute">tataufo:</span>//<span class="attribute">userprofile</span>"&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"avatarurl"</span>&gt;</span><span class="tag">&lt;/<span class="title">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reloadKey</span><span class="params">(key)</span></span>&#123;</span><br><span class="line">    <span class="comment">//reload html</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 1.当用户点击头像的时候，会发送请求 tataufo://userprofile 这是跟客户端之前约定好的一个格式，不需要回调<br> tataufo 是个AppScheme，userprofile你可以认为你提供给网页的接口，当然你可以传递参数<br> 格式如下：tataufo://userprofile#{‘userid’:3}(这里使用的是json形式的参数)</p>
<p> 2.当webview需要调用Native的share，会发送请求 tataufo://share#{‘callback’:’reloadKey’} ,客户端处理完之后会回调reloadKey这个函数</p>
<p>实现如下：<br><a id="more"></a><br> 我们可以在WebView的代理<br> <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp">-<span class="params">(<span class="variable">BOOL</span>)</span>webView:<span class="params">(<span class="variable">UIWebView</span> *)</span>webView shouldStartLoadWithRequest:<span class="params">(<span class="variable">NSURLRequest</span> *)</span>request navigationType:<span class="params">(<span class="variable">UIWebViewNavigationType</span>)</span>navigationType</span></span><br></pre></td></tr></table></figure></p>
<p> 拦截到所有的请求,并且可以控制要不要继续加载</p>
<pre><code>-(<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType
{
  <span class="built_in">NSURL</span> *url=[request URL];
  <span class="keyword">if</span> (url) {

      <span class="keyword">return</span> <span class="literal">NO</span>;
    }<span class="keyword">else</span>{
          <span class="built_in">NSString</span> *myAppScheme = <span class="string">@"tataufo"</span>;
          <span class="keyword">if</span> (![request<span class="variable">.URL</span><span class="variable">.scheme</span> isEqualToString:myAppScheme]) {
              <span class="keyword">return</span> <span class="literal">YES</span>;
          }
          <span class="built_in">NSArray</span> *turnTypes = @[<span class="string">@"profile"</span>,<span class="string">@"share"</span>]
          <span class="built_in">NSString</span> *actionType = request<span class="variable">.URL</span><span class="variable">.host</span>;
          <span class="keyword">if</span> ([turnTypes containsObject:actionType]) {
              <span class="built_in">NSString</span> *jsonDictString = [<span class="keyword">self</span> decodeString:request<span class="variable">.URL</span><span class="variable">.fragment</span>];
              [request<span class="variable">.URL</span><span class="variable">.fragment</span> stringByReplacingPercentEscapesUsingEncoding:<span class="built_in">NSASCIIStringEncoding</span>];
              DDLogDebug(jsonDictString);
              <span class="built_in">NSDictionary</span> *resultDic = [jsonDictString objectFromJSO<span class="built_in">NString</span>];
              [<span class="keyword">self</span> processTurnType:actionType params:resultDic];
              <span class="keyword">return</span> <span class="literal">NO</span>;
          }
        }
  }
  <span class="keyword">return</span> <span class="literal">YES</span>;
}

-(<span class="built_in">NSString</span> *)decodeString:(<span class="built_in">NSString</span>*)encodedString
{
    <span class="comment">//NSString *decodedString = [encodedString stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding ];</span>

    <span class="built_in">NSString</span> *decodedString  = (<span class="built_in">NSString</span> *)<span class="built_in">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(<span class="literal">NULL</span>,
                                                                                                                     (__bridge <span class="built_in">CFStringRef</span>)encodedString,
                                                                                                                     <span class="built_in">CFSTR</span>(<span class="string">""</span>),
                                                                                                                     <span class="built_in">CFStringConvertNSStringEncodingToEncoding</span>(<span class="built_in">NSUTF8StringEncoding</span>));
    <span class="keyword">return</span> decodedString;
}


<span class="comment">// 目前已有的类型actionType</span>
- (<span class="keyword">void</span>) processTurnType:(<span class="built_in">NSString</span> *) type params:(<span class="built_in">NSDictionary</span> *) dict
{
    <span class="keyword">if</span> ([type isEqualToString:<span class="string">@"profile"</span>]){
        <span class="keyword">if</span> (dict<span class="variable">.count</span> == <span class="number">0</span>) {
            <span class="keyword">return</span>;
        }
        <span class="built_in">NSInteger</span> userid = [[dict objectForKey:<span class="string">@"userid"</span>]integerValue];
        TUPersonalCenterSelfViewController *personCenter = [[TUPersonalCenterSelfViewController alloc] init];
        personCenter<span class="variable">.userid</span> = userid;
        [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:personCenter animated:<span class="literal">YES</span>];
    }<span class="keyword">else</span> <span class="keyword">if</span> ([type isEqualToString:<span class="string">@"share"</span>]){
        <span class="keyword">if</span> (dict<span class="variable">.count</span> == <span class="number">0</span>) {
            <span class="keyword">return</span>;
        }
        <span class="built_in">NSString</span> *callback = [dict objectForKey:<span class="string">@"callback"</span>];
        [[TUNetworkManager sharedInstance] shareSuccess:^(<span class="built_in">NSMutableDictionary</span> *dict) {
            <span class="built_in">NSString</span> *key = [dict objectForKey:<span class="string">@"key"</span>];
            <span class="built_in">NSString</span> *jsFunction = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@('%@')"</span>,callback,key];
            <span class="comment">//执行网页已经存在的js函数</span>
            [yourWebview stringByEvaluatingJavaScriptFromString:jsFunction];
        } failure:^(<span class="built_in">NSError</span> *error) {

        }];
    }
}
</code></pre><p>希望可帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UIWebView中 通过js去调用客户端的代码，客户端回调js代码。<br>最近因为项目中有一些页面使用H5实现(不得不说给客户端减少了不小压力啊😂😂)，但是有webview与客户端的交互，在使用过程当中遇到的问题做了一些总结。</p>
<p><strong>我们模拟两个场景</strong><br>在webview中点击某一个用户的头像通过客户端NativeCode实现进入该用户的资料页<br> 网页代码<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span> = "<span class="attribute">tataufo:</span>//<span class="attribute">userprofile</span>"&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"avatarurl"</span>&gt;</span><span class="tag">&lt;/<span class="title">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reloadKey</span><span class="params">(key)</span></span>&#123;</span><br><span class="line">    <span class="comment">//reload html</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 1.当用户点击头像的时候，会发送请求 tataufo://userprofile 这是跟客户端之前约定好的一个格式，不需要回调<br> tataufo 是个AppScheme，userprofile你可以认为你提供给网页的接口，当然你可以传递参数<br> 格式如下：tataufo://userprofile#{‘userid’:3}(这里使用的是json形式的参数)</p>
<p> 2.当webview需要调用Native的share，会发送请求 tataufo://share#{‘callback’:’reloadKey’} ,客户端处理完之后会回调reloadKey这个函数</p>
<p>实现如下：<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="webView" scheme="http://yoursite.com/tags/webView/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-draw-gradient-colors]]></title>
    <link href="http://yoursite.com/2015/08/30/ios-draw-gradient-colors/"/>
    <id>http://yoursite.com/2015/08/30/ios-draw-gradient-colors/</id>
    <published>2015-08-30T13:52:21.000Z</published>
    <updated>2015-10-24T09:30:43.000Z</updated>
    <content type="html"><![CDATA[<p>UIView 实现颜色的渐变的两种方式</p>
<p><strong>1.inserSubLayers</strong></p>
<pre><code><span class="built_in">CAGradientLayer</span> *gradientLayer = [<span class="built_in">CAGradientLayer</span> layer];  <span class="comment">// 设置渐变效果</span>
gradientLayer<span class="variable">.bounds</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;
gradientLayer<span class="variable">.borderWidth</span> = <span class="number">0</span>;

gradientLayer<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;
gradientLayer<span class="variable">.colors</span> = [<span class="built_in">NSArray</span> arrayWithObjects:
                        (<span class="keyword">id</span>)[[<span class="built_in">UIColor</span> redColor] <span class="built_in">CGColor</span>],
                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blueColor]<span class="variable">.CGColor</span>, <span class="literal">nil</span>];
<span class="comment">//垂直渐变</span>
gradientLayer<span class="variable">.startPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">1.0</span>, <span class="number">0.5</span>);
gradientLayer<span class="variable">.endPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.0</span>);

<span class="comment">//水平渐变</span>
gradientLayer<span class="variable">.startPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, <span class="number">0.5</span>);
gradientLayer<span class="variable">.endPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);

[<span class="keyword">self</span><span class="variable">.layer</span> insertSublayer:gradientLayer atIndex:<span class="number">0</span>];
</code></pre><p><strong>2.通过drawRect</strong><br><a id="more"></a></p>
<pre><code>- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect {
<span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();
<span class="built_in">CGContextSaveGState</span>(context);
<span class="built_in">CGContextRestoreGState</span>(context);
<span class="built_in">CGContextClip</span>(context);

<span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();

<span class="keyword">int</span> numComponents = <span class="number">5</span>;    
<span class="built_in">NSArray</span> *gradientColors = @[[<span class="built_in">UIColor</span> redColor],[<span class="built_in">UIColor</span> orangeColor],[<span class="built_in">UIColor</span> blueColor],    [<span class="built_in">UIColor</span> greenColor],[<span class="built_in">UIColor</span> purpleColor]];
<span class="built_in">CGFloat</span> colors[[gradientColors count] * numComponents];
<span class="keyword">const</span> <span class="built_in">CGFloat</span> *components[[gradientColors count]];
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [gradientColors count]; i++) {
    components[i] = <span class="built_in">CGColorGetComponents</span>(((<span class="built_in">UIColor</span> *)[gradientColors objectAtIndex:i])<span class="variable">.CGColor</span>);
    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numComponents; j++) {
        colors[i * numComponents + j] = components[i][j];
    }
}
<span class="built_in">CGGradientRef</span> gradient = <span class="built_in">CGGradientCreateWithColorComponents</span> (colorSpace, colors, <span class="literal">NULL</span>, [gradientColors count]);
<span class="built_in">CGPoint</span> startPoint;
<span class="built_in">CGPoint</span> endPoint;
<span class="comment">//水平渐变</span>
startPoint = <span class="built_in">CGPointMake</span>(rect<span class="variable">.origin</span><span class="variable">.x</span>, <span class="number">0</span>);
endPoint = <span class="built_in">CGPointMake</span>(rect<span class="variable">.size</span><span class="variable">.width</span>, <span class="number">0</span>);
<span class="comment">//垂直渐变</span>
startPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, rect<span class="variable">.origin</span><span class="variable">.y</span>);
endPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, rect<span class="variable">.size</span><span class="variable">.hight</span>);
<span class="built_in">CGContextDrawLinearGradient</span>(context, gradient, startPoint, endPoint, <span class="number">0</span>);
<span class="built_in">CGColorSpaceRelease</span>(colorSpace);
<span class="built_in">CGGradientRelease</span>(gradient);
}
</code></pre><p>希望可以在你需要的时候帮到你，Best wishes！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UIView 实现颜色的渐变的两种方式</p>
<p><strong>1.inserSubLayers</strong></p>
<pre><code><span class="built_in">CAGradientLayer</span> *gradientLayer = [<span class="built_in">CAGradientLayer</span> layer];  <span class="comment">// 设置渐变效果</span>
gradientLayer<span class="variable">.bounds</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;
gradientLayer<span class="variable">.borderWidth</span> = <span class="number">0</span>;

gradientLayer<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;
gradientLayer<span class="variable">.colors</span> = [<span class="built_in">NSArray</span> arrayWithObjects:
                        (<span class="keyword">id</span>)[[<span class="built_in">UIColor</span> redColor] <span class="built_in">CGColor</span>],
                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blueColor]<span class="variable">.CGColor</span>, <span class="literal">nil</span>];
<span class="comment">//垂直渐变</span>
gradientLayer<span class="variable">.startPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">1.0</span>, <span class="number">0.5</span>);
gradientLayer<span class="variable">.endPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.0</span>);

<span class="comment">//水平渐变</span>
gradientLayer<span class="variable">.startPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>, <span class="number">0.5</span>);
gradientLayer<span class="variable">.endPoint</span> = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.0</span>);

[<span class="keyword">self</span><span class="variable">.layer</span> insertSublayer:gradientLayer atIndex:<span class="number">0</span>];
</code></pre><p><strong>2.通过drawRect</strong><br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="小知识" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios-read-userContacts]]></title>
    <link href="http://yoursite.com/2015/08/28/ios-read-userContacts/"/>
    <id>http://yoursite.com/2015/08/28/ios-read-userContacts/</id>
    <published>2015-08-28T15:32:55.000Z</published>
    <updated>2015-09-02T16:31:30.000Z</updated>
    <content type="html"><![CDATA[<p>读取用户通讯录的联系人信息</p>
<p>最近项目中用到上传用户通讯录的功能，做的过程中也遇到了一些问题，包括授权、中英文首字母排序、中英文输入字母搜索匹配等。<br>这里读取包括读取联系人的邮箱、公司、职位、备注、家乡。</p>
<p>中英文排序和搜索如何实现，我写了一个<a href="https://github.com/howeguo/ChineseOrderAndSearchByPinyin" target="_blank" rel="external">demo放在了github上</a>。</p>
<p><strong>1.iOS6之后读取用户通讯录是必须经过用户授权的，只会授权一次，不管你是允许还是不允许，以后想要在更改用户通讯录的权限，都只能在系统设置里修改。</strong></p>
<p><strong>2.做的过程中还发现其实如果你的读取通讯录的功能做在app内部的网页里，是可以不经用户授权直接跨过系统权限读取，也是可以成功的，H5页面跟app客户端进行交互，调用Native code(网页跟客户端的交互，如果有时间也是想单独总结出一篇，总之就是精力不够啊😂)</strong></p>
<p>前面好像讲了一堆废话，好吧，还是直接上代码吧。<br><a id="more"></a></p>
<pre><code>self.dataArrayDic = <span class="comment">[NSMutableArray arrayWithCapacity:0]</span>;
ABAddressBookRef addressBook ;

addressBook = ABAddressBookCreateWithOptions(NULL, NULL);
dispatch_semaphore_t sema = dispatch_semaphore_create(0);
ABAddressBookRequestAccessWithCompletion(addressBook, ^(bool granted, CFErrorRef error)                                                     {
    dispatch_semaphore_signal(sema);
});
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);
//取得本地所有联系人记录
CFArrayRef results = ABAddressBookCopyArrayOfAllPeople(addressBook);
for(int i = 0; i &lt; CFArrayGetCount(results); i++)
{
    NSMutableDictionary *dicInfoLocal = <span class="comment">[NSMutableDictionary dictionaryWithCapacity:0]</span>;
    ABRecordRef <span class="keyword">person</span> = CFArrayGetValueAtIndex(results, i);
    ABMultiValueRef tmlphone =  ABRecordCopyValue(<span class="keyword">person</span>, kABPersonPhoneProperty);
    NSArray *telphone = (__bridge NSArray*)ABMultiValueCopyArrayOfAllValues(tmlphone);
    if (telphone == nil) {
        telphone = @<span class="comment">[]</span>;
    }
    <span class="comment">[dicInfoLocal setObject:telphone forKey:@"telephone"]</span>;
    CFRelease(tmlphone);

    NSString *last = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonLastNameProperty);
    if (last == nil) {
        last = @<span class="string">" "</span>;
    }
    <span class="comment">[dicInfoLocal setObject:last forKey:@"last"]</span>;

    //读取firstname
    NSString *first = (__bridge NSString*)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonFirstNameProperty);
    if (first == nil || <span class="comment">[first isEqualToString:@""]</span>) {
        first = @<span class="string">" "</span>;
    }
    if (<span class="comment">[first isEqualToString:@" "]</span> &amp;&amp; <span class="comment">[last isEqualToString:@" "]</span> ) {
        if (telphone.count &gt; 0) {
            first = telphone<span class="comment">[0]</span>;
        }
    }
    <span class="comment">[dicInfoLocal setObject:first forKey:@"first"]</span>;

    NSString *nickname = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonNicknameProperty);
    if (nickname == nil) {
        nickname = @<span class="string">""</span>;
    }
    NSMutableDictionary *extra = <span class="comment">[NSMutableDictionary dictionary]</span>;
    <span class="comment">[extra setObject:nickname forKey:@"nickname"]</span>;

    NSString *middlename = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonMiddleNamePhoneticProperty);
    if (middlename == nil) {
        middlename = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:middlename forKey:@"middlename"]</span>;

    NSString *organization = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonOrganizationProperty);
    if (organization == nil) {
        organization = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:organization forKey:@"organization"]</span>;

    NSString *jobTitle = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonJobTitleProperty);
    if (jobTitle == nil) {
        jobTitle = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:jobTitle forKey:@"jobTitle"]</span>;

    <span class="comment">[dicInfoLocal setObject:extra forKey:@"extra"]</span>;

    NSString *department = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonDepartmentProperty);
    if (department == nil) {
        department = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:department forKey:@"department"]</span>;

    ABMultiValueRef emailTmp =  ABRecordCopyValue(<span class="keyword">person</span>, kABPersonEmailProperty);
    NSArray *emails = (__bridge NSArray*)ABMultiValueCopyArrayOfAllValues(emailTmp);
    if (emails == nil) {
        emails = @<span class="comment">[]</span>;
    }
    CFRelease(emailTmp);

    <span class="comment">[extra setObject:emails forKey:@"email"]</span>;

    NSString *birthday = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonBirthdayProperty);
    if (birthday == nil) {
        birthday = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:birthday forKey:@"birthday"]</span>;

    NSString *note = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonNoteProperty);
    if (note == nil) {
        note = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:note forKey:@"note"]</span>;

    NSString *personCreationDate = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonCreationDateProperty);
    if (personCreationDate == nil) {
        personCreationDate = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:personCreationDate forKey:@"personCreationDate"]</span>;

    NSString *personModifyDate = (__bridge NSString *)ABRecordCopyValue(<span class="keyword">person</span>, kABPersonModificationDateProperty);
    if (personModifyDate == nil) {
        personModifyDate = @<span class="string">""</span>;
    }
    <span class="comment">[extra setObject:personModifyDate forKey:@"personModifyDate"]</span>;

    ABMultiValueRef streetTmp =  ABRecordCopyValue(<span class="keyword">person</span>, kABPersonAddressProperty);
    NSArray *street = (__bridge NSArray*)ABMultiValueCopyArrayOfAllValues(streetTmp);
    if (street == nil) {
        street = @<span class="comment">[]</span>;
    }
    CFRelease(streetTmp);

    <span class="comment">[extra setObject:street forKey:@"street"]</span>;

    if (<span class="comment">[first isEqualToString:@" "]</span> == NO || <span class="comment">[last isEqualToString:@" "]</span> || (telphone.count &gt; 0)) {
        <span class="comment">[self.dataArrayDic addObject:dicInfoLocal]</span>;
    }
}
CFRelease(results);//new
CFRelease(addressBook);//new
</code></pre><p>  希望帮到你，Best wishes！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>读取用户通讯录的联系人信息</p>
<p>最近项目中用到上传用户通讯录的功能，做的过程中也遇到了一些问题，包括授权、中英文首字母排序、中英文输入字母搜索匹配等。<br>这里读取包括读取联系人的邮箱、公司、职位、备注、家乡。</p>
<p>中英文排序和搜索如何实现，我写了一个<a href="https://github.com/howeguo/ChineseOrderAndSearchByPinyin">demo放在了github上</a>。</p>
<p><strong>1.iOS6之后读取用户通讯录是必须经过用户授权的，只会授权一次，不管你是允许还是不允许，以后想要在更改用户通讯录的权限，都只能在系统设置里修改。</strong></p>
<p><strong>2.做的过程中还发现其实如果你的读取通讯录的功能做在app内部的网页里，是可以不经用户授权直接跨过系统权限读取，也是可以成功的，H5页面跟app客户端进行交互，调用Native code(网页跟客户端的交互，如果有时间也是想单独总结出一篇，总之就是精力不够啊😂)</strong></p>
<p>前面好像讲了一堆废话，好吧，还是直接上代码吧。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS7/8 UITableView/UIScrollView上UIButton不能立即响应高亮的原因及解决办法]]></title>
    <link href="http://yoursite.com/2015/08/24/ios-UIButton-Highlight-issue-in-UITableView/"/>
    <id>http://yoursite.com/2015/08/24/ios-UIButton-Highlight-issue-in-UITableView/</id>
    <published>2015-08-24T15:59:50.000Z</published>
    <updated>2015-08-30T15:25:44.000Z</updated>
    <content type="html"><![CDATA[<p>如果UIButton比较常见的作为UITableViewCell里的子类，当你在点击它时，它默认不会立马显示高亮，这是因为iOS系统会默认会延迟150ms的时间去检查当前该事件是否能够出发UITableView的滑动，如果 NO，UIScrollView会立马将接收到的手势分发到子视图上，如果YES,默认是不显示高亮的。</p>
<p><strong>1、将UIButton所有属于UIScrollView的父视图的delaysContentTouches属性设置成为NO。</strong><br><strong>2、继承UIScrollView或UITableView，并重写- (BOOL)touchesShouldCancelInContentView:(UIView*)view方法，让其响应拖动方法</strong></p>
<p>废话不多说，直接上代码 以下是UITableView的实现<br><a id="more"></a></p>
<pre><code><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span>
<span class="class"><span class="keyword">@interface</span> <span class="title">TUNoDelayHighlightTableView</span> : <span class="title">UITableView</span></span>
<span class="keyword">@end</span>

<span class="preprocessor">#import <span class="title">"TUNoDelayHighlightTableView.h"</span></span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">TUNoDelayHighlightTableView</span></span>

- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder
{
    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder];
    <span class="keyword">if</span> (<span class="keyword">self</span>)
    {
        [<span class="keyword">self</span> reWriteSetting];
    }
    <span class="keyword">return</span> <span class="keyword">self</span>;
}

- (<span class="keyword">id</span>) initWithFrame:(<span class="built_in">CGRect</span>)frame style:(<span class="built_in">UITableViewStyle</span>)style
{
    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame style:style]) {
        [<span class="keyword">self</span> reWriteSetting];
    }
       <span class="keyword">return</span> <span class="keyword">self</span>;
}

- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame
{
    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) {
            [<span class="keyword">self</span> reWriteSetting];
    }
    <span class="keyword">return</span> <span class="keyword">self</span>;
}

- (<span class="keyword">void</span>) reWriteSetting
{
    <span class="keyword">self</span><span class="variable">.delaysContentTouches</span> = <span class="literal">NO</span>;
    <span class="keyword">for</span> (<span class="keyword">id</span> view <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.subviews</span>)
    {
        <span class="comment">// looking for a UITableViewWrapperView</span>
        <span class="keyword">if</span> ([<span class="built_in">NSStringFromClass</span>([view class]) isEqualToString:<span class="string">@"UITableViewWrapperView"</span>])
        {
            <span class="comment">// this test is necessary for safety and because a "UITableViewWrapperView" is NOT a UIScrollView in iOS7</span>
            <span class="keyword">if</span>([view isKindOfClass:[<span class="built_in">UIScrollView</span> class]])
            {
                <span class="comment">// turn OFF delaysContentTouches in the hidden subview</span>
                <span class="built_in">UIScrollView</span> *scroll = (<span class="built_in">UIScrollView</span> *) view;
                scroll<span class="variable">.delaysContentTouches</span> = <span class="literal">NO</span>;
            }
            <span class="keyword">break</span>;
        }
    }

}
- (<span class="built_in">BOOL</span>)touchesShouldCancelInContentView:(<span class="built_in">UIView</span> *)view
{
    <span class="keyword">if</span> ([view isKindOfClass:[<span class="built_in">UIButton</span> class]] || [view isKindOfClass:[<span class="built_in">UIImageView</span> class]])
    {
        <span class="keyword">return</span> <span class="literal">YES</span>;
    }
    <span class="keyword">return</span> [<span class="keyword">super</span> touchesShouldCancelInContentView:view];
}
<span class="keyword">@end</span>
</code></pre><p>我在项目中遇到了这些问题并已解决，希望可以帮到你，Best wishes</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果UIButton比较常见的作为UITableViewCell里的子类，当你在点击它时，它默认不会立马显示高亮，这是因为iOS系统会默认会延迟150ms的时间去检查当前该事件是否能够出发UITableView的滑动，如果 NO，UIScrollView会立马将接收到的手势分发到子视图上，如果YES,默认是不显示高亮的。</p>
<p><strong>1、将UIButton所有属于UIScrollView的父视图的delaysContentTouches属性设置成为NO。</strong><br><strong>2、继承UIScrollView或UITableView，并重写- (BOOL)touchesShouldCancelInContentView:(UIView*)view方法，让其响应拖动方法</strong></p>
<p>废话不多说，直接上代码 以下是UITableView的实现<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <link href="http://yoursite.com/2015/08/24/first-post/"/>
    <id>http://yoursite.com/2015/08/24/first-post/</id>
    <published>2015-08-24T15:54:00.000Z</published>
    <updated>2015-08-24T17:08:34.000Z</updated>
    <content type="html"><![CDATA[<p>很多时候，自己做过的事情都没有记录下来，回头遇见相同的问题的时候，还是需要去Google，这个是一件非常痛苦的事情，其实写博客，不仅仅是对自己的经验的总结和积累，更是当你遇见的问题，别人也遇见的时候，你的经验的分享就会对别人起到非常大的帮助！更重要是<br><a id="more"></a><br>很早之前就说要写博客，但是一直给自己找了无数的借口，最终还是说服自己，毕竟也老大不小，至今单身，暂不总(疯)结(狂)就老了，也得给我的后人留下点什么😂！<br>我也想看看到底自己可以坚持到什么时候！好了，今天就到这吧，我先睡觉😫。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很多时候，自己做过的事情都没有记录下来，回头遇见相同的问题的时候，还是需要去Google，这个是一件非常痛苦的事情，其实写博客，不仅仅是对自己的经验的总结和积累，更是当你遇见的问题，别人也遇见的时候，你的经验的分享就会对别人起到非常大的帮助！更重要是<br>]]>
    
    </summary>
    
      <category term="假文艺" scheme="http://yoursite.com/tags/%E5%81%87%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
</feed>
