<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Howe Kuo Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-03T02:58:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Howe Kuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>install-reddit</title>
    <link href="http://yoursite.com/2016/09/03/install-reddit/"/>
    <id>http://yoursite.com/2016/09/03/install-reddit/</id>
    <published>2016-09-03T02:56:13.000Z</published>
    <updated>2016-09-03T02:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章排名算法reddit<br>第一步安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/reddit/reddit/master/install-reddit.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> install-reddit.<span class="keyword">sh</span></span><br><span class="line">sudo ./install-reddit.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章排名算法reddit&lt;br&gt;第一步安装&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
    
    </summary>
    
    
      <category term="reddit" scheme="http://yoursite.com/tags/reddit/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>first-time-try-electron</title>
    <link href="http://yoursite.com/2016/08/28/first-time-try-electron/"/>
    <id>http://yoursite.com/2016/08/28/first-time-try-electron/</id>
    <published>2016-08-28T03:38:56.000Z</published>
    <updated>2016-08-28T06:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然想起来 electron，就花了点时间试了一下<br>第一步先安装：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> electron</span><br></pre></td></tr></table></figure></p>
<p>安装后，创建一个文件夹 your project<br>然后创建3个文件<br>main.js、package.json、index.html<br>目录结构如下<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your projetc</span><br><span class="line">  -<span class="ruby"> main.js</span><br><span class="line"></span>  -<span class="ruby"> package.json</span><br><span class="line"></span>  -<span class="ruby"> index.html</span></span><br></pre></td></tr></table></figure></p>
<p>配置package.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"your app"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"1.0.0"</span></span>,</span><br><span class="line">  "<span class="attribute">description</span>": <span class="value"><span class="string">"A minimal Electron application"</span></span>,</span><br><span class="line">  "<span class="attribute">main</span>": <span class="value"><span class="string">"main.js"</span></span>,</span><br><span class="line">  "<span class="attribute">scripts</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">start</span>": <span class="value"><span class="string">"electron ."</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">repository</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">type</span>": <span class="value"><span class="string">"git"</span></span>,</span><br><span class="line">    "<span class="attribute">url</span>": <span class="value"><span class="string">"git+https://github.com/electron/electron-quick-start.git"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">keywords</span>": <span class="value">[</span><br><span class="line">    <span class="string">"Electron"</span>,</span><br><span class="line">    <span class="string">"quick"</span>,</span><br><span class="line">    <span class="string">"start"</span>,</span><br><span class="line">    <span class="string">"tutorial"</span></span><br><span class="line">  ]</span>,</span><br><span class="line">  "<span class="attribute">author</span>": <span class="value"><span class="string">"GitHub"</span></span>,</span><br><span class="line">  "<span class="attribute">license</span>": <span class="value"><span class="string">"CC0-1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">bugs</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">url</span>": <span class="value"><span class="string">"https://github.com/electron/electron-quick-start/issues"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">homepage</span>": <span class="value"><span class="string">"https://github.com/electron/electron-quick-start#readme"</span></span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">electron-prebuilt</span>": <span class="value"><span class="string">"^1.2.0"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>配置 main.js</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">const &#123;app, BrowserWindow&#125; = require('electron')</span><br><span class="line"></span><br><span class="line">// Keep a global reference <span class="keyword">of</span> the window object, if you don't, the window will</span><br><span class="line">// be <span class="keyword">closed</span> automatically when the JavaScript object <span class="keyword">is</span> garbage collected.</span><br><span class="line">let win</span><br><span class="line"></span><br><span class="line">function createWindow () &#123;</span><br><span class="line">  // Create the browser window.</span><br><span class="line">  win = new BrowserWindow(&#123;width: 800, height: 600&#125;)</span><br><span class="line"></span><br><span class="line">  // and load the index.html <span class="keyword">of</span> the app.</span><br><span class="line">  win.loadURL(`file://$&#123;__dirname&#125;/index.html`)</span><br><span class="line"></span><br><span class="line">  // <span class="keyword">Open</span> the DevTools.</span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">  // Emitted when the window <span class="keyword">is</span> <span class="keyword">closed</span>.</span><br><span class="line">  win.on('<span class="keyword">closed</span>', () =&gt; &#123;</span><br><span class="line">    // Dereference the window object, usually you would store windows</span><br><span class="line">    // in an array if your app supports multi windows, this <span class="keyword">is</span> the time</span><br><span class="line">    // when you should delete the corresponding element.</span><br><span class="line">    win = null</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This method will be called when Electron has finished</span><br><span class="line">// initialization and <span class="keyword">is</span> ready to create browser windows.</span><br><span class="line">// Some APIs can only be used after this event occurs.</span><br><span class="line">app.on('ready', createWindow)</span><br><span class="line"></span><br><span class="line">// Quit when all windows <span class="keyword">are</span> <span class="keyword">closed</span>.</span><br><span class="line">app.on('window-all-<span class="keyword">closed</span>', () =&gt; &#123;</span><br><span class="line">  // On macOS it <span class="keyword">is</span> common for applications and their menu bar</span><br><span class="line">  // to stay active until the user quits explicitly with Cmd + Q</span><br><span class="line">  if (process.platform !== 'darwin') &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on('activate', () =&gt; &#123;</span><br><span class="line">  // On macOS it's common to re-create a window in the app when the</span><br><span class="line">  // dock icon <span class="keyword">is</span> clicked and there <span class="keyword">are</span> no other windows <span class="keyword">open</span>.</span><br><span class="line">  if (win === null) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// In this file you can include the rest <span class="keyword">of</span> your app's specific main process</span><br><span class="line">// code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure>
<p>最后 编辑一下index.html</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    We are using node <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>,</span><br><span class="line">    Chrome <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>,</span><br><span class="line">    and Electron <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>.</span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后的最后<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure></p>
<p>就会自动弹出窗口</p>
<p>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然想起来 electron，就花了点时间试了一下&lt;br&gt;第一步先安装：&lt;br&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
    
    </summary>
    
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
      <category term="桌面应用" scheme="http://yoursite.com/tags/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    
      <category term="跨平台" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>firsttime-try-vue.js</title>
    <link href="http://yoursite.com/2016/08/28/firsttime-try-vue-js/"/>
    <id>http://yoursite.com/2016/08/28/firsttime-try-vue-js/</id>
    <published>2016-08-28T03:21:46.000Z</published>
    <updated>2016-09-04T03:24:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直听别人在说vue.js，也简单了解了一下，单页面效果跟移动端的体验很像，所以今天尝试用一下，废话不多说<br>第一步安装<br>在用 Vue.js 构建大型应用时推荐使用 NPM 安装，NPM 能很好地和诸如 Webpack 或 Browserify 的 CommonJS 模块打包器配合使用。Vue.js 也提供配套工具来开发单文件组件。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新稳定版本</span></span><br><span class="line">$ <span class="built_in">npm</span> install vue</span><br><span class="line"><span class="comment"># 最新稳定 CSP 兼容版本</span></span><br><span class="line">$ <span class="built_in">npm</span> install vue<span class="property">@csp</span></span><br></pre></td></tr></table></figure>
<p>命令行工具</p>
<p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需一分钟即可启动带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line"><span class="variable">$ </span>npm install -g vue-cli</span><br><span class="line"><span class="comment"># 创建一个基于 "webpack" 模板的新项目</span></span><br><span class="line"><span class="variable">$ </span>vue init webpack my-project</span><br><span class="line"><span class="comment"># 安装依赖，走你</span></span><br><span class="line"><span class="variable">$ </span>cd my-project</span><br><span class="line"><span class="variable">$ </span>npm install</span><br><span class="line"><span class="variable">$ </span>npm run dev</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直听别人在说vue.js，也简单了解了一下，单页面效果跟移动端的体验很像，所以今天尝试用一下，废话不多说&lt;br&gt;第一步安装&lt;br&gt;在用 Vue.js 构建大型应用时推荐使用 NPM 安装，NPM 能很好地和诸如 Webpack 或 Browserify 的 Commo
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>nginx-config-setting-load-balance</title>
    <link href="http://yoursite.com/2016/08/26/nginx-config-setting-load-balance/"/>
    <id>http://yoursite.com/2016/08/26/nginx-config-setting-load-balance/</id>
    <published>2016-08-25T16:45:34.000Z</published>
    <updated>2016-08-25T16:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前也用过nginx的负载均衡，但是一直都没时间去记录一下，今天又实际操作了一次，就抽个时间简单写一下吧<br>我的/ect/nginx/nginx.conf是我的配置文件</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /ect/nginx/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>配置文件都一样，我就直接说重点部分了<br>weight是设置权重<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream todaysay&#123;</span><br><span class="line">         server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">11001</span> weight=<span class="number">4</span>;</span><br><span class="line">         server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">11002</span> weight=<span class="number">3</span>;</span><br><span class="line">         server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">11003</span> weight=<span class="number">2</span>;</span><br><span class="line">         server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">11004</span> weight=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">         listen <span class="number">11000</span>;</span><br><span class="line">         #access_log on;</span><br><span class="line"></span><br><span class="line">         location / &#123;</span><br><span class="line">                 #proxy_redirect on;</span><br><span class="line">                 proxy_pass http://todaysay;</span><br><span class="line">                 proxy_set_header   Host             <span class="variable">$host</span>:<span class="variable">$server</span>_port;</span><br><span class="line">                 proxy_set_header   X-Real-IP        <span class="variable">$remote</span>_addr;</span><br><span class="line">                 proxy_set_header   X-Forwarded-For  <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">                 proxy_set_header X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>保存退出，先检查一下文件是否正确<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ginx -t -c /etc/nginx/nginx.<span class="keyword">conf</span></span><br><span class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</span><br></pre></td></tr></table></figure></p>
<p>一般nginx是80端口，可以先杀掉nginx</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fuser -k <span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure>
<p>加载配置文件</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ginx  -c <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx <span class="built_in">start</span></span><br></pre></td></tr></table></figure>
<p>检查状态<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$    service nginx status</span><br><span class="line"> * nginx <span class="keyword">is</span> <span class="property">running</span></span><br></pre></td></tr></table></figure></p>
<p>到这里你就可以用11000端口nginx，nginx会自动分配到你指定的某个端口上来处理请求</p>
<p>希望可以帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也用过nginx的负载均衡，但是一直都没时间去记录一下，今天又实际操作了一次，就抽个时间简单写一下吧&lt;br&gt;我的/ect/nginx/nginx.conf是我的配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
    
      <category term="load balance" scheme="http://yoursite.com/tags/load-balance/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>login-into-linux-server-without-password</title>
    <link href="http://yoursite.com/2016/08/25/login-into-linux-server-without-password/"/>
    <id>http://yoursite.com/2016/08/25/login-into-linux-server-without-password/</id>
    <published>2016-08-25T15:09:27.000Z</published>
    <updated>2016-08-25T15:13:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>ssh 无密码登录要使用公钥与私钥。linux下可以用用ssh-keygen生成公钥/私钥对，下面我以CentOS为例。</p>
<p>有机器A(192.168.1.155)，B(192.168.1.181)。现想A通过ssh免密码登录到B。</p>
<p>1.在A机下生成公钥/私钥对。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[chenlb<span class="variable">@A</span> ~]<span class="variable">$ </span>ssh-keygen -t rsa -<span class="constant">P </span><span class="string">''</span></span><br></pre></td></tr></table></figure></p>
<p>-P表示密码，-P ‘’ 就表示空密码，也可以不用-P参数，这样就要三车回车，用-P就一次回车。<br>它在/home/chenlb下生成.ssh目录，.ssh下有id_rsa和id_rsa.pub。</p>
<p>2.把A机下的id_rsa.pub复制到B机下，在B机的.ssh/authorized_keys文件里，我用scp复制。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[chenlb<span class="variable">@A</span> ~]<span class="variable">$ </span>scp .ssh/id_rsa.pub chenlb<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">181</span><span class="symbol">:/home/chenlb/id_rsa</span>.pub</span><br><span class="line">chenlb<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">181</span><span class="string">'s password:</span><br><span class="line">id_rsa.pub                                    100%  223     0.2KB/s   00:00</span></span><br></pre></td></tr></table></figure></p>
<p>由于还没有免密码登录的，所以要输入密码。</p>
<p>3.B机把从A机复制的id_rsa.pub添加到.ssh/authorzied_keys文件里。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chenlb<span class="variable">@B</span> ~]<span class="variable">$ </span>cat id_rsa.pub <span class="prompt">&gt;&gt; </span>.ssh/authorized_keys</span><br><span class="line">[chenlb<span class="variable">@B</span> ~]<span class="variable">$ </span>chmod <span class="number">600</span> .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>authorized_keys的权限要是600。</p>
<p>4.A机登录B机。<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">chenlb@A</span> ~]$ ssh <span class="number">192.168</span>.1.181</span><br><span class="line">The authenticity of host <span class="variable">'192.168.1.181</span> <span class="list">(<span class="keyword">192.168.1.181</span>)</span>' can<span class="variable">'t</span> be established.</span><br><span class="line">RSA key fingerprint is <span class="number">00</span>:a6:a8:87:eb:c7:40:10:39:cc:a0:eb:50:d9:6a:5b.</span><br><span class="line">Are you sure you want to continue connecting <span class="list">(<span class="keyword">yes/no</span>)</span>? yes</span><br><span class="line">Warning: Permanently added <span class="variable">'192.168.1.181</span>' <span class="list">(<span class="keyword">RSA</span>)</span> to the list of known hosts.</span><br><span class="line">Last login: Thu Jul  <span class="number">3</span> <span class="number">09</span>:53:18 <span class="number">2008</span> from chenlb</span><br><span class="line"><span class="list">[<span class="keyword">chenlb@B</span> ~]$</span></span></span><br></pre></td></tr></table></figure></p>
<p>第一次登录是时要你输入yes。</p>
<p>现在A机可以无密码登录B机了。</p>
<p>小结：登录的机子可有私钥，被登录的机子要有登录机子的公钥。这个公钥/私钥对一般在私钥宿主机产生。上面是用rsa算法的公钥/私钥对，当然也可以用dsa(对应的文件是id_dsa，id_dsa.pub)</p>
<p>想让A，B机无密码互登录，那B机以上面同样的方式配置即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssh 无密码登录要使用公钥与私钥。linux下可以用用ssh-keygen生成公钥/私钥对，下面我以CentOS为例。&lt;/p&gt;
&lt;p&gt;有机器A(192.168.1.155)，B(192.168.1.181)。现想A通过ssh免密码登录到B。&lt;/p&gt;
&lt;p&gt;1.在A机下生成
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="tip" scheme="http://yoursite.com/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>django deplop by  virtualenv + gunicorn + nginx + supervisor</title>
    <link href="http://yoursite.com/2016/08/25/django-deplop-by-virtualenv-gunicorn-nginx-supervisor/"/>
    <id>http://yoursite.com/2016/08/25/django-deplop-by-virtualenv-gunicorn-nginx-supervisor/</id>
    <published>2016-08-24T16:23:18.000Z</published>
    <updated>2016-08-25T17:25:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试了一下在一台机器上去安装不同版本的python、django<br>发现原来linux上有个类似模拟虚拟环境的东西啊virtualenv<br>就尝试自己在这个虚拟环境里搭建了一套自django1.9.2 python2.7 然后用gunicorn做web服务器、supervisor去管理进程、nginx去做外部转发和访问，这期间参考了国外和国内的一些大牛写的文章，在这里首先表示感谢<br>我也确实是按照这个步骤自己完成了一套这样的服务</p>
<p>第一步：安装虚拟环境的库<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line"></span><br><span class="line">Downloading/unpacking virtualenv</span><br><span class="line">  Downloading virtualenv-<span class="number">15.0</span><span class="number">.3</span>-py2.py3-none-any.whl (<span class="number">3.5</span>MB): <span class="number">3.5</span>MB downloaded</span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv</span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure></p>
<p>第二步：创建虚拟环境<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virtualenv bugenv</span><br><span class="line">New python executable <span class="keyword">in</span> <span class="regexp">/Users/</span>tataufo<span class="regexp">/todaysay_env/</span>bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure></p>
<p>第三步：进入虚拟环境<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www</span><span class="comment"># cd bugenv/</span></span><br><span class="line">root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># source bin/activate</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span> <span class="comment">#激活环境，这个每次在重新登陆服务器的时候都需要激活</span></span><br></pre></td></tr></table></figure></p>
<p>第三步：安装django和gunicorn</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> django==<span class="number">1.9</span>.<span class="number">2</span></span><br><span class="line">sudo pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure>
<p>第四步：创建django项目和django app</p>
<p>django-admin.py startproject bugproject<br>python manages.py startapp bugapp</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># ls</span></span><br><span class="line">bin <span class="keyword">include</span> lib local</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># mkdir djcode</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv</span><span class="comment"># cd djcode/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># django-admin.py startproject bugproject</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode</span><span class="comment"># cd bugproject/</span></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># python manage.py startapp bugapp</span></span><br></pre></td></tr></table></figure>
<p>第五步：设置django 的settings.py文件<br>添加app，最后结果如下<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">INSTALLED_APPS</span> = (</span><br><span class="line">    <span class="symbol">'django</span>.contrib.admin',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.auth',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.sessions',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.messages',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</span><br><span class="line">    # add app</span><br><span class="line">    <span class="symbol">'bugapp'</span>,</span><br><span class="line">    <span class="symbol">'gunicorn'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>第六步：运行gunicorn<br><a id="more"></a><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># pwd</span></span><br><span class="line">/home/www/bugenv/djcode/bugproject</span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># gunicorn bugproject.wsgi:application -b 127.0.0.1:11000</span></span><br></pre></td></tr></table></figure></p>
<p>在这里说下，如果你想同时启动多个端口和设置允许访问的IP可以如下<br>更多设置参考 <a href="http://docs.gunicorn.org/en/stable/settings.html" target="_blank" rel="external">http://docs.gunicorn.org/en/stable/settings.html</a></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># gunicorn bugproject.wsgi:application -b 127.0.0.1:11000 -b 127.0.0.1:11001 -b 127.0.0.1:11002 -b 127.0.0.1:11003</span></span><br><span class="line"></span><br><span class="line">(bugenv)root<span class="variable">@recall</span><span class="symbol">:/home/www/bugenv/djcode/bugproject</span><span class="comment"># gunicorn bugproject.wsgi:application --forwarded-allow-ips '10.166.80.90:8000, 10.65.100.20:9000'</span></span><br></pre></td></tr></table></figure>
<p>第七步：使用supervisor去管理gunicorn的运行<br>先创建一个脚本去启动django服务，就叫gunicorn_start<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">NAME=<span class="string">"bugproject"</span>                                  <span class="comment"># Name of the application</span></span><br><span class="line">DJANGODIR=/home/www/bugenv/djcode/bugproject             <span class="comment"># Django project directory</span></span><br><span class="line">SOCKFILE=/home/www/bugenv/djcode/run/gunicorn.sock  <span class="comment"># we will communicte using this unix socket</span></span><br><span class="line">USER=root                                        <span class="comment"># the user to run as</span></span><br><span class="line">GROUP=root                                     <span class="comment"># the group to run as</span></span><br><span class="line">NUM_WORKERS=<span class="number">4</span>                                    <span class="comment"># how many worker processes should Gunicorn spawn</span></span><br><span class="line">DJANGO_SETTINGS_MODULE=bugproject.settings             <span class="comment"># which settings file should Django use</span></span><br><span class="line">DJANGO_WSGI_MODULE=bugproject.wsgi                     <span class="comment"># WSGI module name</span></span><br><span class="line"></span><br><span class="line">PORT=<span class="number">11000</span></span><br><span class="line">SERVER_NAME=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$NAME</span> as `whoami`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate the virtual environment</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DJANGODIR</span></span><br><span class="line"><span class="built_in">source</span> ../bin/activate</span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=<span class="variable">$DJANGO_SETTINGS_MODULE</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$DJANGODIR</span>:<span class="variable">$PYTHONPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the run directory if it doesn't exist</span></span><br><span class="line">RUNDIR=$(dirname <span class="variable">$SOCKFILE</span>)</span><br><span class="line"><span class="built_in">test</span> <span class="operator">-d</span> <span class="variable">$RUNDIR</span> || mkdir -p <span class="variable">$RUNDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your Django Unicorn</span></span><br><span class="line"><span class="comment"># Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)</span></span><br><span class="line"><span class="built_in">exec</span> ../bin/gunicorn <span class="variable">$&#123;DJANGO_WSGI_MODULE&#125;</span>:application \</span><br><span class="line">  --name <span class="variable">$NAME</span> \</span><br><span class="line">  --workers <span class="variable">$NUM_WORKERS</span> \</span><br><span class="line">  --user=<span class="variable">$USER</span> --group=<span class="variable">$GROUP</span> \</span><br><span class="line">  --bind=<span class="variable">$SERVER_NAME</span>:<span class="variable">$PORT</span> \</span><br><span class="line">  --log-level=debug \</span><br><span class="line">  --log-file=-</span><br><span class="line">~</span><br></pre></td></tr></table></figure></p>
<p>以后就用这个脚本去运行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod u+x bin/gunicorn_start</span><br><span class="line">$ . gunicorn_start</span><br><span class="line"></span><br><span class="line">Starting bugproject as  hello</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Starting gunicorn <span class="number">18.0</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [DEBUG] Arbiter booted</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Listening at: unix:/home/www/bugenv/djcode/run/gunicorn.sock (<span class="number">10724</span>)</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10724</span>] [INFO] Using worker: sync</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10735</span>] [INFO] Booting worker with pid: <span class="number">10735</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10736</span>] [INFO] Booting worker with pid: <span class="number">10736</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">45</span> [<span class="number">10737</span>] [INFO] Booting worker with pid: <span class="number">10737</span></span><br><span class="line"></span><br><span class="line">^C (CONTROL-C to kill Gunicorn)</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">48</span> [<span class="number">10736</span>] [INFO] <span class="function">Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10736</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10735] [INFO] Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10735</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10724] [INFO] Handling signal: <span class="keyword">int</span></span><br><span class="line">2016-06-09 14:21:48 [10737] [INFO] Worker <span class="title">exiting</span> <span class="params">(pid: <span class="number">10737</span>)</span></span><br><span class="line">2016-06-09 14:21:48 [10724] [INFO] Shutting down: Master</span></span><br></pre></td></tr></table></figure></p>
<p>第八步：安装supervisor</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude <span class="keyword">install</span> supervisor</span><br></pre></td></tr></table></figure>
<p>Supervisor可以管理多个服务，因此你可以为不同的服务创建不同的配置文件<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.<span class="literal">d</span></span><br><span class="line">vim hello.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p>
<p>文件内容：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:hello]</span><br><span class="line">command = /home/www/bugenv/djcode/gunicorn_start                    ; Command <span class="keyword">to</span> start app</span><br><span class="line">user = hello                                                          ; User <span class="keyword">to</span> <span class="command">run</span> <span class="keyword">as</span></span><br><span class="line">stdout_logfile = /home/www/bugenv/djcode/logs/gunicorn_supervisor.<span class="command">log</span>   ; Where <span class="keyword">to</span> <span class="command">write</span> <span class="command">log</span> messages</span><br><span class="line">redirect_stderr = <span class="constant">true</span>                                                ; Save stderr <span class="keyword">in</span> <span class="keyword">the</span> same <span class="command">log</span></span><br><span class="line">environment=LANG=en_US.UTF-<span class="number">8</span>,LC_ALL=en_US.UTF-<span class="number">8</span>                       ; Set UTF-<span class="number">8</span> <span class="keyword">as</span> default encoding</span><br></pre></td></tr></table></figure>
<p>创建日志文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello<span class="annotation">@django</span>:~$ mkdir -p <span class="regexp">/home/</span>www<span class="regexp">/bugenv/</span>djcode<span class="regexp">/logs/</span></span><br><span class="line">hello<span class="annotation">@django</span>:~$ touch <span class="regexp">/home/</span>www<span class="regexp">/bugenv/</span>djcode<span class="regexp">/logs/</span>gunicorn_supervisor.log</span><br></pre></td></tr></table></figure>
<p>测试supervisorctl<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl reread</span><br><span class="line"><span class="label">hello:</span> available</span><br><span class="line">$ sudo supervisorctl update</span><br><span class="line"><span class="label">hello:</span> added process group</span><br></pre></td></tr></table></figure></p>
<p>supervisor重启、查看状态、停止操作<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl status hello                       </span><br><span class="line">hello                            RUNNING    pid <span class="number">18020</span>, uptime <span class="number">0</span>:<span class="number">00</span>:<span class="number">50</span></span><br><span class="line">$ sudo supervisorctl stop hello  </span><br><span class="line"><span class="label">hello:</span> stopped</span><br><span class="line">$ sudo supervisorctl start hello                        </span><br><span class="line"><span class="label">hello:</span> started</span><br><span class="line">$ sudo supervisorctl restart hello</span><br><span class="line"><span class="label">hello:</span> stopped</span><br><span class="line"><span class="label">hello:</span> started</span><br></pre></td></tr></table></figure></p>
<p>第九步：安装nginx</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo install nginx</span><br><span class="line"><span class="variable">$ </span>sudo service nginx start</span><br></pre></td></tr></table></figure>
<p>配置nginx</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><br><span class="line">upstream hello_app_server </span><span class="expression">&#123;</span><br><span class="line">  <span class="begin-block"># fail</span>_<span class="variable">timeout</span>=0 <span class="variable">means</span> <span class="variable">we</span> <span class="variable">always</span> <span class="variable">retry</span> <span class="variable">an</span> <span class="variable">upstream</span> <span class="variable">even</span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">it</span> <span class="variable">failed</span></span><br><span class="line">  <span class="begin-block"># to return a good HTTP response </span>(<span class="variable">in</span> <span class="variable">case</span> <span class="variable">the</span> <span class="variable">Unicorn</span> <span class="variable">master</span> <span class="variable">nukes</span> <span class="variable">a</span></span><br><span class="line">  <span class="begin-block"># single worker for timing out</span>)<span class="variable">.</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">server</span> <span class="variable">unix</span>:<span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/run</span><span class="end-block">/gunicorn.sock fail</span>_<span class="variable">timeout</span>=0;</span><br><span class="line">&#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">server </span><span class="expression">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">listen</span>   80;</span><br><span class="line">    <span class="variable">server</span>_<span class="variable">name</span> <span class="variable">example.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">client</span>_<span class="variable">max</span>_<span class="variable">body</span>_<span class="variable">size</span> 4<span class="variable">G</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">access</span>_<span class="variable">log</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/logs</span><span class="end-block">/nginx-access.log</span>;</span><br><span class="line">    <span class="variable">error</span>_<span class="variable">log</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/logs</span><span class="end-block">/nginx-error.log</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">location</span> <span class="end-block">/static</span><span class="end-block">/ </span>&#123;</span><br><span class="line">        <span class="variable">alias</span>   <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/static</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">    location /media/ </span><span class="expression">&#123;</span><br><span class="line">        <span class="variable">alias</span>   <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/media</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line">    location / </span><span class="expression">&#123;</span><br><span class="line">        <span class="begin-block"># an HTTP header important enough to have its own Wikipedia entry</span>:</span><br><span class="line">        <span class="begin-block">#   http</span>:/<span class="end-block">/en.wikipedia.org</span><span class="end-block">/wiki</span><span class="end-block">/X-Forwarded-For</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">X-Forwarded-For</span> $<span class="variable">proxy</span>_<span class="variable">add</span>_<span class="variable">x</span>_<span class="variable">forwarded</span>_<span class="variable">for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># enable this <span class="keyword">if</span> and only <span class="keyword">if</span> you use HTTPS</span>, <span class="variable">this</span> <span class="variable">helps</span> <span class="variable">Rack</span></span><br><span class="line">        <span class="begin-block"># set the proper protocol for doing redirects</span>:</span><br><span class="line">        <span class="begin-block"># proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">X-Forwarded-Proto</span> <span class="variable">https</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># pass the Host</span>: <span class="variable">header</span> <span class="variable">from</span> <span class="variable">the</span> <span class="variable">client</span> <span class="variable">right</span> <span class="variable">along</span> <span class="variable">so</span> <span class="variable">redirects</span></span><br><span class="line">        <span class="begin-block"># can be set properly within the Rack application</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">set</span>_<span class="variable">header</span> <span class="variable">Host</span> $<span class="variable">http</span>_<span class="variable">host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># we don</span>'<span class="variable">t</span> <span class="variable">want</span> <span class="variable">nginx</span> <span class="variable">trying</span> <span class="variable">to</span> <span class="variable">do</span> <span class="variable">something</span> <span class="variable">clever</span> <span class="variable">with</span></span><br><span class="line">        <span class="begin-block"># redirects</span>, <span class="variable">we</span> <span class="variable">set</span> <span class="variable">the</span> <span class="variable">Host</span>: <span class="variable">header</span> <span class="variable">above</span> <span class="variable">already.</span></span><br><span class="line">        <span class="variable">proxy</span>_<span class="variable">redirect</span> <span class="variable">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># set </span><span class="string">"proxy_buffering off"</span> *<span class="variable">only</span>* <span class="variable">for</span> <span class="variable">Rainbows</span>! <span class="variable">when</span> <span class="variable">doing</span></span><br><span class="line">        <span class="begin-block"># Comet</span><span class="end-block">/long-poll stuff.  It</span>'<span class="variable">s</span> <span class="variable">also</span> <span class="variable">safe</span> <span class="variable">to</span> <span class="variable">set</span> <span class="variable"><span class="keyword">if</span></span> <span class="variable">you</span>'<span class="variable">re</span></span><br><span class="line">        <span class="begin-block"># using only serving fast clients with Unicorn </span>+ <span class="variable">nginx.</span></span><br><span class="line">        <span class="begin-block"># Otherwise you </span>_<span class="variable">want</span>_ <span class="variable">nginx</span> <span class="variable">to</span> <span class="variable">buffer</span> <span class="variable">responses</span> <span class="variable">to</span> <span class="variable">slow</span></span><br><span class="line">        <span class="begin-block"># clients</span>, <span class="variable">really.</span></span><br><span class="line">        <span class="begin-block"># proxy</span>_<span class="variable">buffering</span> <span class="variable">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="begin-block"># Try to serve static files from nginx</span>, <span class="variable">no</span> <span class="variable">point</span> <span class="variable">in</span> <span class="variable">making</span> <span class="variable">an</span></span><br><span class="line">        <span class="begin-block"># </span>*<span class="variable">application</span>* <span class="variable">server</span> <span class="variable">like</span> <span class="variable">Unicorn</span><span class="end-block">/Rainbows</span>! <span class="variable">serve</span> <span class="variable">static</span> <span class="variable">files.</span></span><br><span class="line">        <span class="variable"><span class="keyword">if</span></span> (!<span class="variable">-f</span> $<span class="variable">request</span>_<span class="variable">filename</span>) &#123;</span><br><span class="line">            <span class="variable">proxy</span>_<span class="variable">pass</span> <span class="variable">http</span>:/<span class="end-block">/hello</span>_<span class="variable">app</span>_<span class="variable">server</span>;</span><br><span class="line">            <span class="variable">break</span>;</span><br><span class="line">        &#125;</span><span class="xml"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Error pages</span><br><span class="line">    error_page 500 502 503 504 /500.html;</span><br><span class="line">    location = /500.html </span><span class="expression">&#123;</span><br><span class="line">        <span class="variable">root</span> <span class="end-block">/home</span><span class="end-block">/www</span><span class="end-block">/bugenv</span><span class="end-block">/djcode</span><span class="end-block">/static</span>/;</span><br><span class="line">    &#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>重启<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>nginx  -c /etc/nginx/nginx.conf <span class="comment">#设置加载配置文件</span></span><br><span class="line"><span class="variable">$ </span>sudo service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>最后附上如何卸载各个服务(这里就不翻译了)：</p>
<p>Uninstalling the Django application</p>
<p>If time comes to remove the application, follow these steps.</p>
<p>Remove the virtual server from Nginx sites-enabled folder:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>hello_django</span><br></pre></td></tr></table></figure></p>
<p>Restart Nginx:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>If you never plan to use this application again, you can remove its config file also from the sites-available directory<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>hello_django</span><br></pre></td></tr></table></figure></p>
<p>Stop the application with Supervisor:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo supervisorctl stop hello</span><br></pre></td></tr></table></figure></p>
<p>Remove the application from Supervisor’s control scripts directory:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">rm</span> /etc/supervisor/<span class="keyword">conf</span>.<span class="keyword">d</span>/hello.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p>
<p>If you never plan to use this application again, you can now remove its entire directory from webapps:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo rm -r /webapps/hello_django</span><br></pre></td></tr></table></figure>
<p>感谢该文章作者：<br><a href="http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/" target="_blank" rel="external">http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/</a></p>
<p>希望可以帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天尝试了一下在一台机器上去安装不同版本的python、django&lt;br&gt;发现原来linux上有个类似模拟虚拟环境的东西啊virtualenv&lt;br&gt;就尝试自己在这个虚拟环境里搭建了一套自django1.9.2 python2.7 然后用gunicorn做web服务器、supervisor去管理进程、nginx去做外部转发和访问，这期间参考了国外和国内的一些大牛写的文章，在这里首先表示感谢&lt;br&gt;我也确实是按照这个步骤自己完成了一套这样的服务&lt;/p&gt;
&lt;p&gt;第一步：安装虚拟环境的库&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install virtualenv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Downloading/unpacking virtualenv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Downloading virtualenv-&lt;span class=&quot;number&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;-py2.py3-none-any.whl (&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;MB): &lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;MB downloaded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Installing collected packages: virtualenv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully installed virtualenv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cleaning up...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二步：创建虚拟环境&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;virtualenv bugenv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;New python executable &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;tataufo&lt;span class=&quot;regexp&quot;&gt;/todaysay_env/&lt;/span&gt;bin/python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Installing setuptools, pip, wheel...done.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第三步：进入虚拟环境&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# cd bugenv/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# source bin/activate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#激活环境，这个每次在重新登陆服务器的时候都需要激活&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第三步：安装django和gunicorn&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; django==&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gunicorn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第四步：创建django项目和django app&lt;/p&gt;
&lt;p&gt;django-admin.py startproject bugproject&lt;br&gt;python manages.py startapp bugapp&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;复制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; lib local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# mkdir djcode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# cd djcode/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv/djcode&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# django-admin.py startproject bugproject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv/djcode&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# cd bugproject/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(bugenv)root&lt;span class=&quot;variable&quot;&gt;@recall&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/home/www/bugenv/djcode/bugproject&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# python manage.py startapp bugapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第五步：设置django 的settings.py文件&lt;br&gt;添加app，最后结果如下&lt;br&gt;&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;INSTALLED_APPS&lt;/span&gt; = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.admin&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.auth&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.contenttypes&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.sessions&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.messages&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;django&lt;/span&gt;.contrib.staticfiles&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # add app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;bugapp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;gunicorn&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第六步：运行gunicorn&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="gunicorn" scheme="http://yoursite.com/tags/gunicorn/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="supervisor" scheme="http://yoursite.com/tags/supervisor/"/>
    
      <category term="virtualenv" scheme="http://yoursite.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>mysql-django-support-emoji(utf8mb4)</title>
    <link href="http://yoursite.com/2016/08/24/mysql-django-support-emoji-utf8mb4/"/>
    <id>http://yoursite.com/2016/08/24/mysql-django-support-emoji-utf8mb4/</id>
    <published>2016-08-24T15:58:28.000Z</published>
    <updated>2016-08-24T16:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做mysql数据存储的时候就遇见了大家可能都会遇见的问题(emoji存储)<br>这里主要是涉及到utf8mb4的设置</p>
<p>mysql 5.5以上才支持字符集<br>第一步：数据库版本检查:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="function"><span class="title">version</span><span class="params">()</span></span> #查看mysql版本</span><br></pre></td></tr></table></figure>
<p>第二步：修改mysql配置文件 my.conf(windows上my.ini), 修改/添加如下配置为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-<span class="operator"><span class="keyword">set</span>=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-<span class="built_in">character</span>-<span class="keyword">set</span>=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8mb4</span></span><br></pre></td></tr></table></figure></p>
<p>第三步：重启mysql<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$service</span> mysql restart</span><br></pre></td></tr></table></figure></p>
<p>第四步:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%';</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value              </span>|</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line">|<span class="string"> character_set_client    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_database  </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary            </span>|</span><br><span class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_server    </span>|<span class="string"> utf8mb4            </span>|</span><br><span class="line">|<span class="string"> character_set_system    </span>|<span class="string"> utf8              </span>|</span><br><span class="line">|<span class="string"> collation_connection    </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">|<span class="string"> collation_database      </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">|<span class="string"> collation_server        </span>|<span class="string"> utf8mb4_unicode_ci </span>|</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line"> rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p> 最后，因为我是跟django一起配合用的，所以 django的settings.py文件里也要做相应的配置<br> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;<span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做mysql数据存储的时候就遇见了大家可能都会遇见的问题(emoji存储)&lt;br&gt;这里主要是涉及到utf8mb4的设置&lt;/p&gt;
&lt;p&gt;mysql 5.5以上才支持字符集&lt;br&gt;第一步：数据库版本检查:&lt;/p&gt;
&lt;figure class=&quot;highlight styl
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="emoji" scheme="http://yoursite.com/tags/emoji/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>first-product</title>
    <link href="http://yoursite.com/2016/04/23/first-product/"/>
    <id>http://yoursite.com/2016/04/23/first-product/</id>
    <published>2016-04-23T06:46:05.000Z</published>
    <updated>2016-08-24T15:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>来谈一谈近期从iOS转做PM的感受吧，<br>之前觉得PM的工作其实是很简单，整天就会随便想一想，就要来让我们来做这做那的，而且感觉他们整天很清闲，<br>真正当我去做这项工作的时候，才发现其实不是这样的，他们每天除了要解决各个部门的需求之外，每天脑子里还要想各种天花乱坠的需求和玩法，<br>而且最大的感受其实是，一天到晚都在开会，去解决各个部门的问题。<br>即使我以后不做PM了，我也会对PM好的，因为他们真的不容易，最后一句请善待你们公司的PM，啊哈哈哈！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来谈一谈近期从iOS转做PM的感受吧，&lt;br&gt;之前觉得PM的工作其实是很简单，整天就会随便想一想，就要来让我们来做这做那的，而且感觉他们整天很清闲，&lt;br&gt;真正当我去做这项工作的时候，才发现其实不是这样的，他们每天除了要解决各个部门的需求之外，每天脑子里还要想各种天花乱坠的
    
    </summary>
    
    
      <category term="Product" scheme="http://yoursite.com/tags/Product/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa-UI-UITextField</title>
    <link href="http://yoursite.com/2016/01/21/ReactiveCocoa-UI-UITextField/"/>
    <id>http://yoursite.com/2016/01/21/ReactiveCocoa-UI-UITextField/</id>
    <published>2016-01-21T07:17:56.000Z</published>
    <updated>2016-01-21T07:23:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇见了UITextField的使用<br>1.监听输入的状态<br>    [[self.textField rac_signalForControlEvents:UIControlEventEditingDidBegin] subscribeNext:^(UITextField *sender) {<br>              @strongify(self);<br>              NSLog(@”tag is %@”,@(sender.tag));<br>        }];</p>
<ol>
<li>监控输入的内容<br> [self.textField.rac_textSignal subscribeNext:^(id x) {<pre><code><span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"content is %@"</span>,x);</span>
</code></pre> }];</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇见了UITextField的使用&lt;br&gt;1.监听输入的状态&lt;br&gt;    [[self.textField rac_signalForControlEvents:UIControlEventEditingDidBegin] subscribeNext:^(UIText
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
      <category term="UIKit" scheme="http://yoursite.com/tags/UIKit/"/>
    
      <category term="UITextField" scheme="http://yoursite.com/tags/UITextField/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa-Observer</title>
    <link href="http://yoursite.com/2016/01/21/ReactiveCocoa-Observer/"/>
    <id>http://yoursite.com/2016/01/21/ReactiveCocoa-Observer/</id>
    <published>2016-01-21T07:02:46.000Z</published>
    <updated>2016-08-24T17:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.监听属性的变化</p>
<p>TUHomeViewModel *model = [[TUHomeViewModel alloc] init];<br>[RACObserve(model, dataArray) subscribeNext:^(id x) {<br>    NSLog(@”haha is %@”,x);<br>}];<br>希望可以帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.监听属性的变化&lt;/p&gt;
&lt;p&gt;TUHomeViewModel *model = [[TUHomeViewModel alloc] init];&lt;br&gt;[RACObserve(model, dataArray) subscribeNext:^(id x) {&lt;br&gt;   
    
    </summary>
    
    
      <category term="Observer" scheme="http://yoursite.com/tags/Observer/"/>
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa-UI-Button</title>
    <link href="http://yoursite.com/2016/01/19/ReactiveCocoa-UI-Button/"/>
    <id>http://yoursite.com/2016/01/19/ReactiveCocoa-UI-Button/</id>
    <published>2016-01-19T12:16:53.000Z</published>
    <updated>2016-01-21T07:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>新项目中使用了ReactiveCocoa框架，然后在使用过程中遇见的问题记录一下<br>今天遇见了UIButton的使用<br>传统的UIButton Target Action 方式</p>
<p>之前我们使用UIButton的点击方法一般有两种。一种是直接从xib里面拖一个IBAction出来在里面写代码。</p>
<p>另外一种是代码创建的 比如这样</p>
<p>  UIButton *myButton = [[UIButton alloc] init…];<br>  [myButton addTarget:something action:@selector(myAction) forControlEvents:UIControlEventTouchUpInside];<br>然后在下面写一个myAction的方法来进行操作。</p>
<p>这样对我来说存在两个问题：</p>
<p>button对应的方法分开了。在阅读代码的时候，当我想知道这个button对应的方法或者反过来action方法对应的button。通常需要跳转一次以上才能知道。(也许是我的阅读代码习惯比较原始)<br>我在action方法里面如果需要引用一个变量的时候，无法使用局部变量。通常就需要把这个资源设计为一个property。尽管这个资源或者变量只是在action里面调用一次。(这个也许是我写代码的问题)<br>这两个可能在我遇见ReactiveCocoa都不能叫问题。但是在ReactiveCocoa里面我发现了更加优美的解决方法。好开心。</p>
<p>ReactiveCocoa方式的UIButton</p>
<p>由于ReactiveCocoa高深的知识点，我也弄不太清楚。下面我只是说明怎么用的hello world级别。更多内容请阅读github上的项目主页。</p>
<p>如果使用xib。只需拖一个IBOutlet的property出来。比如这样</p>
<p>  @property (weak, nonatomic) IBOutlet UIButton <em>xibButton;<br>  NSString </em>helloWorld = @”hello world!!!”;<br>  self.xibButton.rac_command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {<br>  NSLog(@”%@”, helloWorld);<br>  return [RACSignal empty];<br>  }];<br>如果是代码创建一切照旧</p>
<p>NSString <em>helloWorld = @”hello world!!!”;<br>UIButton </em>myButton = [UIButton buttonWithType:UIButtonTypeSystem];<br>myButton.frame = CGRectMake(0, 0, 100, 50);<br>[myButton setTitle:@”Say” forState:UIControlStateNormal];<br>[self.view addSubview:myButton];<br>myButton.rac_command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {<br>  NSLog(@”%@”, helloWorld);<br>  return [RACSignal empty];<br>}];<br>这些代码我一般写在viewDidLoad方法里面。当然你可以在正确的地方使用他们。<br>运行试试。哇。魔法一般。完全解决我在传统的UIButton遇到的两个问题。</p>
<p>Best Wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新项目中使用了ReactiveCocoa框架，然后在使用过程中遇见的问题记录一下&lt;br&gt;今天遇见了UIButton的使用&lt;br&gt;传统的UIButton Target Action 方式&lt;/p&gt;
&lt;p&gt;之前我们使用UIButton的点击方法一般有两种。一种是直接从xib里面拖
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
      <category term="UIButton" scheme="http://yoursite.com/tags/UIButton/"/>
    
      <category term="UIKit" scheme="http://yoursite.com/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title>ios-iBeacon-test</title>
    <link href="http://yoursite.com/2016/01/14/ios-iBeacon-test/"/>
    <id>http://yoursite.com/2016/01/14/ios-iBeacon-test/</id>
    <published>2016-01-14T08:19:32.000Z</published>
    <updated>2016-01-15T10:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>iBeacon是苹果公司在iOS7推出的新技术，但是发现国内这方面的app一直很少，今天抽时间也研究一下<br>传统的GPS最多可以定位10米左右的范围，但是iBeacon的范围是可以<br>iBeacon是苹果被允许能在后台运行的，不论你将应用退出到后台还是杀死，iBeacon都能激活应用不过只能激活10秒左右，但是这段时间足可以做很多事情了。</p>
<p>iBeacon 硬件<br>当 Apple 在 iOS 7 中介绍 iBeacon 时，他们也宣布任何一个兼容的 iOS 设备都能作为一个 iBeacon 。然而，他们也表示硬件制造商同样也能制造单独的、低功耗的 iBeacon 。在本文发表前，距离 iOS 7 的推出已过去大约 6 个月，现在已有许多家公司宣布和推出了独立的硬件 iBeacon 发射器。</p>
<p>iBeacon 使用 Bluetooth LE 技术，所以你必须要有一个内置有低功耗蓝牙的 iOS 设备以便与 iBeacon 协同工作。目前这个列表里包含如下一些设备：</p>
<ol>
<li>iPhone 4s 或更新的</li>
<li>第三代 iPad 或更新的</li>
<li>iPad mini 或更新的</li>
<li>第五代iPod touch 或更新的</li>
</ol>
<p>注意的是：在iOS8中苹果改变了地位的开启方式（iBeacon的使用是基于蓝牙和定位的），首先要在工程里的info.plist增加字段NSLocationAlwaysUsageDescription（这个是允许一直在后台运行的）</p>
<p>还是看下面的吧<br>推荐一些关于iBeacon的详细的说明和使用<br><a href="http://www.jianshu.com/p/7816b016ceac" target="_blank" rel="external">http://www.jianshu.com/p/7816b016ceac</a><br><a href="http://www.cctime.com/html/2014-11-4/201411411115005.htm" target="_blank" rel="external">http://www.cctime.com/html/2014-11-4/201411411115005.htm</a><br><a href="http://www.cocoachina.com/industry/20140512/8377.html" target="_blank" rel="external">http://www.cocoachina.com/industry/20140512/8377.html</a><br><a href="http://www.5icool.org/a/201402/a4653.html" target="_blank" rel="external">http://www.5icool.org/a/201402/a4653.html</a></p>
<p>Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iBeacon是苹果公司在iOS7推出的新技术，但是发现国内这方面的app一直很少，今天抽时间也研究一下&lt;br&gt;传统的GPS最多可以定位10米左右的范围，但是iBeacon的范围是可以&lt;br&gt;iBeacon是苹果被允许能在后台运行的，不论你将应用退出到后台还是杀死，iBea
    
    </summary>
    
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>create-new-ios-app-process</title>
    <link href="http://yoursite.com/2016/01/14/create-new-ios-app-process/"/>
    <id>http://yoursite.com/2016/01/14/create-new-ios-app-process/</id>
    <published>2016-01-14T03:36:22.000Z</published>
    <updated>2016-01-14T04:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要做新项目，涉及到搭建app的环境和一些简单的配置，就简单记录一下<br>App发布的工作一切准备好了之后，就可以发布应用到App Store了，应用发布概括起来需要以下几个流程：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注册<span class="keyword">App</span> ID，在Xcode中指定Bundle Identifier</span><br><span class="line">创建发布证书（Distribution Certificate）</span><br><span class="line">创建 Distribution Provisioning Profile</span><br><span class="line">用Distribution Profile为应用签名</span><br><span class="line">打包<span class="keyword">App</span></span><br><span class="line">在iTunes Connect上传<span class="keyword">App</span></span><br></pre></td></tr></table></figure></p>
<p>以上大部分的操作是在Provisioning Portal、XCode、Keychain Access工具和iTunes Connect中完成的。<br>上传App必须在Xcode软件里执行（也就是要有MacAir, MacMini等运行Moc OS X Mountain等10.x的系统，最好是10.7等最新版的。<br>XCode这个Object C的集成开发环境目前版本是4.3.2。<br>其他操作都可以在普通浏览器里完成。</p>
<p>发布iOS应用程序到App Store - 创建App ID<br>首先给iOS应用程序申请一个App ID，它是你的应用程序的唯一标识。登录iOS Developer网站，点击右侧的iOS Provisioning Portal链接，选择App ID。<br>选择创建新app ID。在Description中输入应用的描述信息。Bundle Identifier是指应用的代码标识，你可以用公司名.应用名来标识，例如：com.company.demoapp。<br>然后打开X-Code，选择Target &gt; Summary。在Identifier输入框中输入上面注册的Bundle Identifier。<br>发布iOS应用程序到App Store - 创建Distribution Certificate<br>iOS应用都有一个安全证书用于验证开发者身份和签名。在Provisioning Portal的Distribution栏目下有详细介绍，但总体可以归纳为以下步骤。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打开Keychain Access，在Preferences中关闭OCSP和CRL。</span><br><span class="line">点击Keychain Access菜单，选择Certificate Assistant &gt; Request Certificate from Authority。</span><br><span class="line"></span><br><span class="line">输入Email地址，选择Saved <span class="keyword">to</span> Disk</span><br><span class="line">然后会在桌面上生成一个<span class="built_in">.</span>CSR的文件。</span><br><span class="line">然后进入Provisioning <span class="keyword">Portal</span>，选择Certificates <span class="subst">-&gt; </span>Distribution <span class="subst">-&gt; </span>Add Certificate，添加刚才创建的<span class="built_in">.</span>CSR签名文件。</span><br><span class="line">在等待审核的时候下载并安装WWDR intermediate certificate。</span><br><span class="line">刷新页面，然后就可以下载证书了。下载后安装。</span><br><span class="line">最后一步，打开Keychain Access。选中刚才安装的<span class="keyword">private</span> key，选择菜单中的Export Item将私钥导出。将导出的私钥备份到一个安全的地方，以便以后重装了系统可以还原。</span><br></pre></td></tr></table></figure></p>
<p>发布iOS应用程序到App Store - 创建Distribution Provisioning Profile<br>打开Provisioning Portal，选择Provisioning -&gt; Distribution，选择添加一个新的profile。Distribution Method要选择App Store，App ID需要输入在前面申请的App ID。提交后需要等一会儿再刷新这个页面。然后就可以下载和安装profile了。安装后profile会被添加到XCode。<br>发布iOS应用程序到App Store - 检查签名和生成设置<br>打开XCode，在Build Settings中选择Code Signing。在Release设置上选择刚才申请的Distribution Profile。<br>选择生成目标为iOS device，然后点击Archiving开始打包应用。</p>
<p>感谢原作者：<a href="http://blog.sina.com.cn/s/blog_3e28c8a50101fxtp.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_3e28c8a50101fxtp.html</a><br>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司要做新项目，涉及到搭建app的环境和一些简单的配置，就简单记录一下&lt;br&gt;App发布的工作一切准备好了之后，就可以发布应用到App Store了，应用发布概括起来需要以下几个流程：&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>how-to-install-cocoapods</title>
    <link href="http://yoursite.com/2015/11/25/how-to-install-cocoapods/"/>
    <id>http://yoursite.com/2015/11/25/how-to-install-cocoapods/</id>
    <published>2015-11-24T16:22:58.000Z</published>
    <updated>2015-11-24T16:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CocoaPods安装和使用</strong><br>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。<br>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令</p>
<p>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="operator"><span class="keyword">install</span> cocoapods</span><br><span class="line">sudo gem <span class="keyword">install</span> -<span class="keyword">n</span> /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> cocoapods</span></span><br></pre></td></tr></table></figure>
<p>由于某些原因，执行时会出现下面的错误提示：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  Could <span class="operator">not</span> find <span class="operator">a</span> valid gem <span class="string">'cocoapods'</span> (&gt;= <span class="number">0</span>), here is why:</span><br><span class="line">          Unable <span class="built_in">to</span> download data <span class="built_in">from</span> <span class="keyword">https</span>://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (<span class="keyword">https</span>://rubygems.org/latest_specs<span class="number">.4</span><span class="number">.8</span>.gz)</span><br></pre></td></tr></table></figure>
<p>当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，</p>
<p>#注意taobao的镜像地址已经都换成https了,好多博客如果没更新的话还是http<br>执行以下命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gem sources -l</span><br><span class="line"><span class="variable">$ </span>gem sources --remove <span class="symbol">https:</span>/<span class="regexp">/rubygems.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -a <span class="symbol">https:</span>/<span class="regexp">/ruby.taobao.org/</span></span><br><span class="line"><span class="variable">$ </span>gem sources -l</span><br></pre></td></tr></table></figure></p>
<p>安装成功后，接着执行命令：<br><a id="more"></a></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> setup</span><br></pre></td></tr></table></figure>
<p>如果Ruby环境不够新，可能需要更新以下：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="keyword">update</span> --<span class="built_in">system</span></span><br></pre></td></tr></table></figure></p>
<p>至此安装就完成了，我们可以尝试搜索一个第三方类库：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> search AFNetworking</span><br></pre></td></tr></table></figure>
<p>使用CocoaPods的第一步，是在当前项目下，新建一个Podfile文件：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">touch</span> Podfile</span><br></pre></td></tr></table></figure></p>
<p>然后利用vim打开Podfile文件编辑，加入你想要使用的类库，格式如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">platform </span>:ios</span><br><span class="line">pod <span class="string">'Reachability'</span>, <span class="string">'3.1.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">platform</span>:ios, <span class="string">'6.0'</span></span><br><span class="line">pod <span class="string">'JSONKit'</span>,<span class="string">'1.4'</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.3.1'</span></span><br></pre></td></tr></table></figure></p>
<p>如果是拷贝的别人的项目，或是一个很久没打开过的项目，可能需要先执行一下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> update</span><br></pre></td></tr></table></figure>
<p>最后一步，执行命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>当终端出现类似下面的提示后，就代表成功了：</p>
<p>[!] From now on use <code>Sample0814.xcworkspace</code>.<br>这个时候会看到项目文件夹下多了一个文件xxx.xcworkspace，以后要通过这个文件打开项目，老项目文件xxx.xcodeproj不再使用。<br>P.s.1 上面的每一步都有可能出现问题，但大部分问题都是因为大局域网的原因，用一个网速稳定的境外VPN可破。</p>
<p>P.s.2 如果上面因为权限问题安装失败，必须每次都要删除</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="regexp">/Users/</span>loginnanme<span class="regexp">/Library/</span>Caches<span class="regexp">/CocoaPods/</span></span><br></pre></td></tr></table></figure>
<p>因为这个缓存中会存下你的github的东西，造成每次都调用上次权限问题的缓存。</p>
<p>P.s.3 关于Podfile文件编辑时，第三方库版本号的各种写法：</p>
<p>复制代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pod ‘AFNetworking’      <span class="comment">//不显式指定依赖库版本，表示每次都获取最新版本</span></span><br><span class="line">pod ‘AFNetworking’,  ‘<span class="number">2.0</span>’     <span class="comment">//只使用2.0版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&gt;<span class="number">2.0</span>′     <span class="comment">//使用高于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&gt;=<span class="number">2.0</span>′     <span class="comment">//使用大于或等于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&lt;<span class="number">2.0</span>′     <span class="comment">//使用小于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘&lt;=<span class="number">2.0</span>′     <span class="comment">//使用小于或等于2.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0.1</span><span class="number">.2</span>′     <span class="comment">//使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0.1</span>′     <span class="comment">//使用大于等于0.1但小于1.0的版本</span></span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;<span class="number">0</span>′     <span class="comment">//高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CocoaPods安装和使用&lt;/strong&gt;&lt;br&gt;CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。&lt;br&gt;CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令&lt;/p&gt;
&lt;p&gt;CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; cocoapods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; /usr/&lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;bin&lt;/span&gt; cocoapods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于某些原因，执行时会出现下面的错误提示：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR:  Could &lt;span class=&quot;operator&quot;&gt;not&lt;/span&gt; find &lt;span class=&quot;operator&quot;&gt;a&lt;/span&gt; valid gem &lt;span class=&quot;string&quot;&gt;&#39;cocoapods&#39;&lt;/span&gt; (&amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), here is why:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Unable &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; download data &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (&lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://rubygems.org/latest_specs&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;.gz)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，&lt;/p&gt;
&lt;p&gt;#注意taobao的镜像地址已经都换成https了,好多博客如果没更新的话还是http&lt;br&gt;执行以下命令：&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;gem sources -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;gem sources --remove &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/rubygems.org/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;gem sources -a &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/ruby.taobao.org/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;gem sources -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装成功后，接着执行命令：&lt;br&gt;
    
    </summary>
    
    
      <category term="cocoapods" scheme="http://yoursite.com/tags/cocoapods/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits</title>
    <link href="http://yoursite.com/2015/11/22/git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits/"/>
    <id>http://yoursite.com/2015/11/22/git-reflog-in-order-to-recovery-deleted-files-or-be-rebased-commits/</id>
    <published>2015-11-22T15:49:53.000Z</published>
    <updated>2015-11-24T16:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git reflog </strong> 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录<br><strong>git log </strong> 则不能察看已经删除了的commit记录</p>
<p>具体一个例子，假设有三个commit:<br>commit3: add test3.c<br>commit2: add test2.c<br>commit1: add test1.c</p>
<p>如果执行 <strong>git reset –hard HEAD~1 </strong>则删除了commit3，如果发现删除错误了，需要恢复commit3，<br>或者是<strong>rebase</strong>的时候被rebase掉了，<br>这个时候就要使用 <strong>git reflog</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD@&#123;<span class="number">0</span>&#125;: HEAD~<span class="number">1</span>: updating HEAD</span><br><span class="line"><span class="number">63</span>ee781 HEAD@&#123;<span class="number">1</span>&#125;: commit: test3:q</span><br></pre></td></tr></table></figure></p>
<p>test3就是commit信息，然后拿到63ee781<br>可以运行<strong>git reset –hard 63ee781</strong>，则恢复了cmmit3，<br>运行 <strong>git log </strong>后可以看到：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">commit3:</span> <span class="keyword">add</span> test3.c</span><br><span class="line"><span class="label">commit2:</span> <span class="keyword">add</span> test2.c</span><br><span class="line"><span class="label">commit1:</span> <span class="keyword">add</span> test1.c</span><br></pre></td></tr></table></figure></p>
<p>这里也可以使用另外一种方法来实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="number">63</span>ee78</span><br></pre></td></tr></table></figure>
<p>感谢原作者 <a href="http://blog.csdn.net/ibingow/article/details/7541402" target="_blank" rel="external">http://blog.csdn.net/ibingow/article/details/7541402</a><br>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;git reflog &lt;/strong&gt; 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录&lt;br&gt;&lt;strong&gt;git log &lt;/strong&gt; 则不能察看已经删除了的commit记录&lt;/p&gt;

    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="reflog" scheme="http://yoursite.com/tags/reflog/"/>
    
  </entry>
  
  <entry>
    <title>git-tag-option</title>
    <link href="http://yoursite.com/2015/11/20/git-tag-option/"/>
    <id>http://yoursite.com/2015/11/20/git-tag-option/</id>
    <published>2015-11-19T16:06:59.000Z</published>
    <updated>2015-11-24T16:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>查看标签</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git tag <span class="comment"># 在控制台打印出当前仓库的所有标签</span></span><br><span class="line"><span class="variable">$ </span>git tag -l ‘v<span class="number">0</span>.<span class="number">1</span>.*’ <span class="comment"># 搜索符合模式的标签</span></span><br></pre></td></tr></table></figure></p>
<p><strong>切换标签</strong><br>与切换分支命令相同，用git checkout [tagname]<br>切回去用 git checkout . 或者是 git checkout [当前开发的branch]<br>查看标签信息<br>用git show命令可以查看标签的版本信息：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0<span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure></p>
<p><strong>创建标签</strong><br>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。<br>创建轻量标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0<span class="number">.1</span><span class="number">.2</span>-light</span><br></pre></td></tr></table></figure></p>
<p>创建附注标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0<span class="number">.1</span><span class="number">.2</span> -m <span class="string">"0.1.2版本"</span></span><br></pre></td></tr></table></figure></p>
<p>创建轻量标签不需要传递参数，直接指定标签名称即可。<br>创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>
<p><strong>删除标签</strong></p>
<p>误打或需要修改标签时，需要先将标签删除，再打新标签。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0<span class="number">.1</span><span class="number">.2</span> <span class="preprocessor"># 删除标签</span></span><br></pre></td></tr></table></figure></p>
<p>参数d即delete的缩写，意为删除其后指定的标签。</p>
<p>给指定的commit打标签<br>打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。<br>补打标签<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0<span class="number">.1</span><span class="number">.1</span> <span class="number">9f</span>bc3d0</span><br></pre></td></tr></table></figure></p>
<p><strong>提交标签</strong><br>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v0<span class="number">.1</span><span class="number">.2</span> <span class="preprocessor"># 将v0<span class="number">.1</span><span class="number">.2</span>标签提交到git服务器</span></span><br><span class="line">$ git push origin –tags <span class="preprocessor"># 将本地所有标签一次性提交到git服务器</span></span><br></pre></td></tr></table></figure></p>
<p>注意：如果想看之前某个标签状态下的文件，可以这样操作<br>1.git tag   查看当前分支下的标签<br>2.git  checkout v0.21   此时会指向打v0.21标签时的代码状态，（但现在处于一个空的分支上）</p>
<p>感谢原作者：<a href="http://blog.csdn.net/wangjia55/article/details/8793577" target="_blank" rel="external">http://blog.csdn.net/wangjia55/article/details/8793577</a><br>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;查看标签&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="tag" scheme="http://yoursite.com/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>how-to-compress-file-inclue(music-image-videos)</title>
    <link href="http://yoursite.com/2015/11/15/how-to-compress-file-inclue-music-image-videos/"/>
    <id>http://yoursite.com/2015/11/15/how-to-compress-file-inclue-music-image-videos/</id>
    <published>2015-11-14T16:56:33.000Z</published>
    <updated>2015-11-14T16:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了美剧硅谷，突然想自己也实现一个文件压缩，也正好项目里遇到了一些图片的压缩、日志文件太占用空间急需压缩的问题。<br>但是我还没想好怎么写，先mark一下，会不定期更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了美剧硅谷，突然想自己也实现一个文件压缩，也正好项目里遇到了一些图片的压缩、日志文件太占用空间急需压缩的问题。&lt;br&gt;但是我还没想好怎么写，先mark一下，会不定期更新&lt;/p&gt;

    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql-came-issues</title>
    <link href="http://yoursite.com/2015/11/15/mysql-came-issues/"/>
    <id>http://yoursite.com/2015/11/15/mysql-came-issues/</id>
    <published>2015-11-14T16:09:09.000Z</published>
    <updated>2015-11-14T16:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然碰见mysql服务挂掉的问题，就记录一下</p>
<p><strong> 先是重启  </strong><br>    mysql service restart<br>    /etc/init.d/mysql: ERROR: The partition with /var/lib/mysql is too full!</p>
<p><strong>这时候发现是硬盘存储空间不够了</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">df</span> -lh</span><br></pre></td></tr></table></figure></p>
<p><strong>发现/dev/xvda1 下可使用的几乎没有了</strong></p>
<p><strong>但是并不知道如何把大文件找到，如下 </strong><br>    <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size +<span class="number">100</span>M （大于<span class="number">100</span>M的文件）</span><br><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size <span class="number">100</span>M （等于<span class="number">100</span>M的文件）</span><br><span class="line"><span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f -size -<span class="number">100</span>M （小<span class="number">100</span>M的文件）</span><br></pre></td></tr></table></figure></p>
<p><strong>也可以把所有比较大的目录都会列出来</strong><br>  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh <span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<p><strong>然后开删</strong><br>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rm</span> -rf</span><br></pre></td></tr></table></figure></p>
<p><strong>但是发现即使把这些删除了，硬盘的内存好像没有变化，最后google后用到了这个(PS:执行完后果然立马内存释放了)</strong><br>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> clean</span><br></pre></td></tr></table></figure></p>
<p><strong>然后就是接着启动</strong><br>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mysql</span> service restart</span><br></pre></td></tr></table></figure></p>
<p><strong>但是奇怪的是一直在starting 但是并没有日志,后来用</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--console</span></span><br><span class="line"></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">49</span>:<span class="number">56</span> [ERROR] Found <span class="number">8</span> prepared transactions! It means that mysqld was <span class="operator">not</span> shut down properly <span class="keyword">last</span> <span class="built_in">time</span> <span class="operator">and</span> critical recovery information (<span class="keyword">last</span> binlog <span class="operator">or</span> tc.<span class="built_in">log</span> <span class="built_in">file</span>) was manually deleted <span class="keyword">after</span> <span class="operator">a</span> crash. You have <span class="built_in">to</span> <span class="built_in">start</span> mysqld <span class="operator">with</span> <span class="comment">--tc-heuristic-recover switch to commit or rollback pending transactions.</span></span><br></pre></td></tr></table></figure>
<p><strong>最后google后找到一个办法</strong><br>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --<span class="keyword">tc</span>-heuristic-<span class="keyword">recover</span>=ROLLBACK</span><br></pre></td></tr></table></figure></p>
<p><strong>最后看了一下控制台，也可以用service mysql status </strong></p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--console</span></span><br><span class="line">151114 23:55:58 InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">151114 23:55:58 InnoDB: Mutexes and rw_locks <span class="operator"><span class="keyword">use</span> GCC atomic builtins</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Compressed <span class="keyword">tables</span> <span class="keyword">use</span> zlib <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: <span class="keyword">Using</span> Linux <span class="keyword">native</span> AIO</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Initializing buffer pool, <span class="keyword">size</span> = <span class="number">256.0</span><span class="keyword">M</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: Completed initialization <span class="keyword">of</span> buffer pool</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">58</span> <span class="keyword">InnoDB</span>: highest supported <span class="keyword">file</span> <span class="keyword">format</span> <span class="keyword">is</span> Barracuda.</span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">59</span>  <span class="keyword">InnoDB</span>: Waiting <span class="keyword">for</span> the background threads <span class="keyword">to</span> <span class="keyword">start</span></span><br><span class="line"><span class="number">151114</span> <span class="number">23</span>:<span class="number">56</span>:<span class="number">00</span> Percona XtraDB (<span class="keyword">http</span>://www.percona.com) <span class="number">5.5</span><span class="number">.41</span>-MariaDB-<span class="number">37.0</span> started;</span> log sequence number 2610000435</span><br><span class="line">151114 23:56:00 [Note] Plugin 'FEEDBACK' is disabled.</span><br><span class="line">151114 23:56:00 [Note] Server socket created on IP: '<span class="operator">0.<span class="number">0.0</span><span class="number">.0</span><span class="string">'.</span><br><span class="line">151114 23:56:00 [Note] Event Scheduler: Loaded 1 event</span><br><span class="line">151114 23:56:00 [Note] mysqld: ready for connections.</span><br><span class="line">Version: '</span><span class="number">5.5</span><span class="number">.42</span>-MariaDB-<span class="number">1</span>~precise-<span class="keyword">log</span><span class="string">'  socket: '</span>/<span class="keyword">var</span>/run/mysqld/mysqld.sock<span class="string">'  port: 3306  mariadb.org binary distribution</span></span></span><br></pre></td></tr></table></figure>
<p>希望可以帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然碰见mysql服务挂掉的问题，就记录一下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 先是重启  &lt;/strong&gt;&lt;br&gt;    mysql service restart&lt;br&gt;    /etc/init.d/mysql: ERROR: The partition with
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ios-latest-error-when-upload-new-version</title>
    <link href="http://yoursite.com/2015/10/30/ios-latest-error-when-upload-new-version/"/>
    <id>http://yoursite.com/2015/10/30/ios-latest-error-when-upload-new-version/</id>
    <published>2015-10-29T18:44:12.000Z</published>
    <updated>2015-10-29T18:53:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>fuck，感觉每次提交app到appStore都会遇见新的问题，今天果然也不例外！<br>错误代码为ERROR ITMS－90049<br><img src="http://img.blog.csdn.net/20151022191627756" alt="Aaron Swartz"></p>
<p>解决问题方式：</p>
<ol>
<li>在xcode左下角搜索info.plist 找到第三方的info.plist文件，如友盟中腾讯Api文件夹下的info.plist文件；</li>
<li>找到Bundle version字段 ，添加项目的build号</li>
<li><strong>添加</strong>Bundle identifier 字段，并对应添加项目的BundleId号；</li>
<li>找到Bundle versions string, short字段 添加项目的版本号</li>
<li>然后进行提交。</li>
</ol>
<p>感谢原作者 附上原文地址：<br><a href="http://blog.csdn.net/u013950854/article/details/49337605" target="_blank" rel="external">http://blog.csdn.net/u013950854/article/details/49337605</a></p>
<p>Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fuck，感觉每次提交app到appStore都会遇见新的问题，今天果然也不例外！&lt;br&gt;错误代码为ERROR ITMS－90049&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151022191627756&quot; alt=&quot;Aaron Sw
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>ios-dynamic-blur-for-custom-navigation</title>
    <link href="http://yoursite.com/2015/10/24/ios-dynamic-blur-for-custom-navigation/"/>
    <id>http://yoursite.com/2015/10/24/ios-dynamic-blur-for-custom-navigation/</id>
    <published>2015-10-24T08:15:32.000Z</published>
    <updated>2015-10-24T09:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写博客了，今天抽个空写了一个在项目中用到的一个功能。<br>主要需求是列表头部有一个cover图，然后在cover的上方的<strong>导航栏实现实时模糊</strong>，我写了一个<a href="https://github.com/howeguo/CustomDynamicBlurNavigation" target="_blank" rel="external">demo放在了github上</a>。</p>
<p><img src="https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/1.gif" alt="Aaron Swartz"><br><a id="more"></a><br><img src="https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/2.gif" alt="Aaron Swartz"></p>
<p>希望可帮到你，Best wishes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写博客了，今天抽个空写了一个在项目中用到的一个功能。&lt;br&gt;主要需求是列表头部有一个cover图，然后在cover的上方的&lt;strong&gt;导航栏实现实时模糊&lt;/strong&gt;，我写了一个&lt;a href=&quot;https://github.com/howeguo/CustomDynamicBlurNavigation&quot;&gt;demo放在了github上&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/howeguo/CustomDynamicBlurNavigation/master/1.gif&quot; alt=&quot;Aaron Swartz&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="blur" scheme="http://yoursite.com/tags/blur/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="小技巧" scheme="http://yoursite.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
